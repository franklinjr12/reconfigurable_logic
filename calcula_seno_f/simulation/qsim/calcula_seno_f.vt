// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/12/2021 21:04:39"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    calcula_seno_f
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module calcula_seno_f_vlg_sample_tst(
	clock,
	x,
	sampler_tx
);
input  clock;
input [31:0] x;
output sampler_tx;

reg sample;
time current_time;
always @(clock or x)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module calcula_seno_f_vlg_check_tst (
	const6,
	const120,
	res_f,
	sinx,
	x_f,
	xpow2,
	xpow3,
	xpow5,
	sampler_rx
);
input [31:0] const6;
input [31:0] const120;
input [31:0] res_f;
input [31:0] sinx;
input [31:0] x_f;
input [31:0] xpow2;
input [31:0] xpow3;
input [31:0] xpow5;
input sampler_rx;

reg [31:0] const6_expected;
reg [31:0] const120_expected;
reg [31:0] res_f_expected;
reg [31:0] sinx_expected;
reg [31:0] x_f_expected;
reg [31:0] xpow2_expected;
reg [31:0] xpow3_expected;
reg [31:0] xpow5_expected;

reg [31:0] const6_prev;
reg [31:0] const120_prev;
reg [31:0] res_f_prev;
reg [31:0] sinx_prev;
reg [31:0] x_f_prev;
reg [31:0] xpow2_prev;
reg [31:0] xpow3_prev;
reg [31:0] xpow5_prev;

reg [31:0] const6_expected_prev;
reg [31:0] const120_expected_prev;
reg [31:0] res_f_expected_prev;
reg [31:0] sinx_expected_prev;
reg [31:0] x_f_expected_prev;
reg [31:0] xpow2_expected_prev;
reg [31:0] xpow3_expected_prev;
reg [31:0] xpow5_expected_prev;

reg [31:0] last_const6_exp;
reg [31:0] last_const120_exp;
reg [31:0] last_res_f_exp;
reg [31:0] last_sinx_exp;
reg [31:0] last_x_f_exp;
reg [31:0] last_xpow2_exp;
reg [31:0] last_xpow3_exp;
reg [31:0] last_xpow5_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	const6_prev = const6;
	const120_prev = const120;
	res_f_prev = res_f;
	sinx_prev = sinx;
	x_f_prev = x_f;
	xpow2_prev = xpow2;
	xpow3_prev = xpow3;
	xpow5_prev = xpow5;
end

// update expected /o prevs

always @(trigger)
begin
	const6_expected_prev = const6_expected;
	const120_expected_prev = const120_expected;
	res_f_expected_prev = res_f_expected;
	sinx_expected_prev = sinx_expected;
	x_f_expected_prev = x_f_expected;
	xpow2_expected_prev = xpow2_expected;
	xpow3_expected_prev = xpow3_expected;
	xpow5_expected_prev = xpow5_expected;
end


// expected x_f[ 31 ]
initial
begin
	x_f_expected[31] = 1'bX;
end 
// expected x_f[ 30 ]
initial
begin
	x_f_expected[30] = 1'bX;
end 
// expected x_f[ 29 ]
initial
begin
	x_f_expected[29] = 1'bX;
end 
// expected x_f[ 28 ]
initial
begin
	x_f_expected[28] = 1'bX;
end 
// expected x_f[ 27 ]
initial
begin
	x_f_expected[27] = 1'bX;
end 
// expected x_f[ 26 ]
initial
begin
	x_f_expected[26] = 1'bX;
end 
// expected x_f[ 25 ]
initial
begin
	x_f_expected[25] = 1'bX;
end 
// expected x_f[ 24 ]
initial
begin
	x_f_expected[24] = 1'bX;
end 
// expected x_f[ 23 ]
initial
begin
	x_f_expected[23] = 1'bX;
end 
// expected x_f[ 22 ]
initial
begin
	x_f_expected[22] = 1'bX;
end 
// expected x_f[ 21 ]
initial
begin
	x_f_expected[21] = 1'bX;
end 
// expected x_f[ 20 ]
initial
begin
	x_f_expected[20] = 1'bX;
end 
// expected x_f[ 19 ]
initial
begin
	x_f_expected[19] = 1'bX;
end 
// expected x_f[ 18 ]
initial
begin
	x_f_expected[18] = 1'bX;
end 
// expected x_f[ 17 ]
initial
begin
	x_f_expected[17] = 1'bX;
end 
// expected x_f[ 16 ]
initial
begin
	x_f_expected[16] = 1'bX;
end 
// expected x_f[ 15 ]
initial
begin
	x_f_expected[15] = 1'bX;
end 
// expected x_f[ 14 ]
initial
begin
	x_f_expected[14] = 1'bX;
end 
// expected x_f[ 13 ]
initial
begin
	x_f_expected[13] = 1'bX;
end 
// expected x_f[ 12 ]
initial
begin
	x_f_expected[12] = 1'bX;
end 
// expected x_f[ 11 ]
initial
begin
	x_f_expected[11] = 1'bX;
end 
// expected x_f[ 10 ]
initial
begin
	x_f_expected[10] = 1'bX;
end 
// expected x_f[ 9 ]
initial
begin
	x_f_expected[9] = 1'bX;
end 
// expected x_f[ 8 ]
initial
begin
	x_f_expected[8] = 1'bX;
end 
// expected x_f[ 7 ]
initial
begin
	x_f_expected[7] = 1'bX;
end 
// expected x_f[ 6 ]
initial
begin
	x_f_expected[6] = 1'bX;
end 
// expected x_f[ 5 ]
initial
begin
	x_f_expected[5] = 1'bX;
end 
// expected x_f[ 4 ]
initial
begin
	x_f_expected[4] = 1'bX;
end 
// expected x_f[ 3 ]
initial
begin
	x_f_expected[3] = 1'bX;
end 
// expected x_f[ 2 ]
initial
begin
	x_f_expected[2] = 1'bX;
end 
// expected x_f[ 1 ]
initial
begin
	x_f_expected[1] = 1'bX;
end 
// expected x_f[ 0 ]
initial
begin
	x_f_expected[0] = 1'bX;
end 
// expected xpow2[ 31 ]
initial
begin
	xpow2_expected[31] = 1'bX;
end 
// expected xpow2[ 30 ]
initial
begin
	xpow2_expected[30] = 1'bX;
end 
// expected xpow2[ 29 ]
initial
begin
	xpow2_expected[29] = 1'bX;
end 
// expected xpow2[ 28 ]
initial
begin
	xpow2_expected[28] = 1'bX;
end 
// expected xpow2[ 27 ]
initial
begin
	xpow2_expected[27] = 1'bX;
end 
// expected xpow2[ 26 ]
initial
begin
	xpow2_expected[26] = 1'bX;
end 
// expected xpow2[ 25 ]
initial
begin
	xpow2_expected[25] = 1'bX;
end 
// expected xpow2[ 24 ]
initial
begin
	xpow2_expected[24] = 1'bX;
end 
// expected xpow2[ 23 ]
initial
begin
	xpow2_expected[23] = 1'bX;
end 
// expected xpow2[ 22 ]
initial
begin
	xpow2_expected[22] = 1'bX;
end 
// expected xpow2[ 21 ]
initial
begin
	xpow2_expected[21] = 1'bX;
end 
// expected xpow2[ 20 ]
initial
begin
	xpow2_expected[20] = 1'bX;
end 
// expected xpow2[ 19 ]
initial
begin
	xpow2_expected[19] = 1'bX;
end 
// expected xpow2[ 18 ]
initial
begin
	xpow2_expected[18] = 1'bX;
end 
// expected xpow2[ 17 ]
initial
begin
	xpow2_expected[17] = 1'bX;
end 
// expected xpow2[ 16 ]
initial
begin
	xpow2_expected[16] = 1'bX;
end 
// expected xpow2[ 15 ]
initial
begin
	xpow2_expected[15] = 1'bX;
end 
// expected xpow2[ 14 ]
initial
begin
	xpow2_expected[14] = 1'bX;
end 
// expected xpow2[ 13 ]
initial
begin
	xpow2_expected[13] = 1'bX;
end 
// expected xpow2[ 12 ]
initial
begin
	xpow2_expected[12] = 1'bX;
end 
// expected xpow2[ 11 ]
initial
begin
	xpow2_expected[11] = 1'bX;
end 
// expected xpow2[ 10 ]
initial
begin
	xpow2_expected[10] = 1'bX;
end 
// expected xpow2[ 9 ]
initial
begin
	xpow2_expected[9] = 1'bX;
end 
// expected xpow2[ 8 ]
initial
begin
	xpow2_expected[8] = 1'bX;
end 
// expected xpow2[ 7 ]
initial
begin
	xpow2_expected[7] = 1'bX;
end 
// expected xpow2[ 6 ]
initial
begin
	xpow2_expected[6] = 1'bX;
end 
// expected xpow2[ 5 ]
initial
begin
	xpow2_expected[5] = 1'bX;
end 
// expected xpow2[ 4 ]
initial
begin
	xpow2_expected[4] = 1'bX;
end 
// expected xpow2[ 3 ]
initial
begin
	xpow2_expected[3] = 1'bX;
end 
// expected xpow2[ 2 ]
initial
begin
	xpow2_expected[2] = 1'bX;
end 
// expected xpow2[ 1 ]
initial
begin
	xpow2_expected[1] = 1'bX;
end 
// expected xpow2[ 0 ]
initial
begin
	xpow2_expected[0] = 1'bX;
end 
// expected xpow3[ 31 ]
initial
begin
	xpow3_expected[31] = 1'bX;
end 
// expected xpow3[ 30 ]
initial
begin
	xpow3_expected[30] = 1'bX;
end 
// expected xpow3[ 29 ]
initial
begin
	xpow3_expected[29] = 1'bX;
end 
// expected xpow3[ 28 ]
initial
begin
	xpow3_expected[28] = 1'bX;
end 
// expected xpow3[ 27 ]
initial
begin
	xpow3_expected[27] = 1'bX;
end 
// expected xpow3[ 26 ]
initial
begin
	xpow3_expected[26] = 1'bX;
end 
// expected xpow3[ 25 ]
initial
begin
	xpow3_expected[25] = 1'bX;
end 
// expected xpow3[ 24 ]
initial
begin
	xpow3_expected[24] = 1'bX;
end 
// expected xpow3[ 23 ]
initial
begin
	xpow3_expected[23] = 1'bX;
end 
// expected xpow3[ 22 ]
initial
begin
	xpow3_expected[22] = 1'bX;
end 
// expected xpow3[ 21 ]
initial
begin
	xpow3_expected[21] = 1'bX;
end 
// expected xpow3[ 20 ]
initial
begin
	xpow3_expected[20] = 1'bX;
end 
// expected xpow3[ 19 ]
initial
begin
	xpow3_expected[19] = 1'bX;
end 
// expected xpow3[ 18 ]
initial
begin
	xpow3_expected[18] = 1'bX;
end 
// expected xpow3[ 17 ]
initial
begin
	xpow3_expected[17] = 1'bX;
end 
// expected xpow3[ 16 ]
initial
begin
	xpow3_expected[16] = 1'bX;
end 
// expected xpow3[ 15 ]
initial
begin
	xpow3_expected[15] = 1'bX;
end 
// expected xpow3[ 14 ]
initial
begin
	xpow3_expected[14] = 1'bX;
end 
// expected xpow3[ 13 ]
initial
begin
	xpow3_expected[13] = 1'bX;
end 
// expected xpow3[ 12 ]
initial
begin
	xpow3_expected[12] = 1'bX;
end 
// expected xpow3[ 11 ]
initial
begin
	xpow3_expected[11] = 1'bX;
end 
// expected xpow3[ 10 ]
initial
begin
	xpow3_expected[10] = 1'bX;
end 
// expected xpow3[ 9 ]
initial
begin
	xpow3_expected[9] = 1'bX;
end 
// expected xpow3[ 8 ]
initial
begin
	xpow3_expected[8] = 1'bX;
end 
// expected xpow3[ 7 ]
initial
begin
	xpow3_expected[7] = 1'bX;
end 
// expected xpow3[ 6 ]
initial
begin
	xpow3_expected[6] = 1'bX;
end 
// expected xpow3[ 5 ]
initial
begin
	xpow3_expected[5] = 1'bX;
end 
// expected xpow3[ 4 ]
initial
begin
	xpow3_expected[4] = 1'bX;
end 
// expected xpow3[ 3 ]
initial
begin
	xpow3_expected[3] = 1'bX;
end 
// expected xpow3[ 2 ]
initial
begin
	xpow3_expected[2] = 1'bX;
end 
// expected xpow3[ 1 ]
initial
begin
	xpow3_expected[1] = 1'bX;
end 
// expected xpow3[ 0 ]
initial
begin
	xpow3_expected[0] = 1'bX;
end 
// expected xpow5[ 31 ]
initial
begin
	xpow5_expected[31] = 1'bX;
end 
// expected xpow5[ 30 ]
initial
begin
	xpow5_expected[30] = 1'bX;
end 
// expected xpow5[ 29 ]
initial
begin
	xpow5_expected[29] = 1'bX;
end 
// expected xpow5[ 28 ]
initial
begin
	xpow5_expected[28] = 1'bX;
end 
// expected xpow5[ 27 ]
initial
begin
	xpow5_expected[27] = 1'bX;
end 
// expected xpow5[ 26 ]
initial
begin
	xpow5_expected[26] = 1'bX;
end 
// expected xpow5[ 25 ]
initial
begin
	xpow5_expected[25] = 1'bX;
end 
// expected xpow5[ 24 ]
initial
begin
	xpow5_expected[24] = 1'bX;
end 
// expected xpow5[ 23 ]
initial
begin
	xpow5_expected[23] = 1'bX;
end 
// expected xpow5[ 22 ]
initial
begin
	xpow5_expected[22] = 1'bX;
end 
// expected xpow5[ 21 ]
initial
begin
	xpow5_expected[21] = 1'bX;
end 
// expected xpow5[ 20 ]
initial
begin
	xpow5_expected[20] = 1'bX;
end 
// expected xpow5[ 19 ]
initial
begin
	xpow5_expected[19] = 1'bX;
end 
// expected xpow5[ 18 ]
initial
begin
	xpow5_expected[18] = 1'bX;
end 
// expected xpow5[ 17 ]
initial
begin
	xpow5_expected[17] = 1'bX;
end 
// expected xpow5[ 16 ]
initial
begin
	xpow5_expected[16] = 1'bX;
end 
// expected xpow5[ 15 ]
initial
begin
	xpow5_expected[15] = 1'bX;
end 
// expected xpow5[ 14 ]
initial
begin
	xpow5_expected[14] = 1'bX;
end 
// expected xpow5[ 13 ]
initial
begin
	xpow5_expected[13] = 1'bX;
end 
// expected xpow5[ 12 ]
initial
begin
	xpow5_expected[12] = 1'bX;
end 
// expected xpow5[ 11 ]
initial
begin
	xpow5_expected[11] = 1'bX;
end 
// expected xpow5[ 10 ]
initial
begin
	xpow5_expected[10] = 1'bX;
end 
// expected xpow5[ 9 ]
initial
begin
	xpow5_expected[9] = 1'bX;
end 
// expected xpow5[ 8 ]
initial
begin
	xpow5_expected[8] = 1'bX;
end 
// expected xpow5[ 7 ]
initial
begin
	xpow5_expected[7] = 1'bX;
end 
// expected xpow5[ 6 ]
initial
begin
	xpow5_expected[6] = 1'bX;
end 
// expected xpow5[ 5 ]
initial
begin
	xpow5_expected[5] = 1'bX;
end 
// expected xpow5[ 4 ]
initial
begin
	xpow5_expected[4] = 1'bX;
end 
// expected xpow5[ 3 ]
initial
begin
	xpow5_expected[3] = 1'bX;
end 
// expected xpow5[ 2 ]
initial
begin
	xpow5_expected[2] = 1'bX;
end 
// expected xpow5[ 1 ]
initial
begin
	xpow5_expected[1] = 1'bX;
end 
// expected xpow5[ 0 ]
initial
begin
	xpow5_expected[0] = 1'bX;
end 
// expected const6[ 31 ]
initial
begin
	const6_expected[31] = 1'bX;
end 
// expected const6[ 30 ]
initial
begin
	const6_expected[30] = 1'bX;
end 
// expected const6[ 29 ]
initial
begin
	const6_expected[29] = 1'bX;
end 
// expected const6[ 28 ]
initial
begin
	const6_expected[28] = 1'bX;
end 
// expected const6[ 27 ]
initial
begin
	const6_expected[27] = 1'bX;
end 
// expected const6[ 26 ]
initial
begin
	const6_expected[26] = 1'bX;
end 
// expected const6[ 25 ]
initial
begin
	const6_expected[25] = 1'bX;
end 
// expected const6[ 24 ]
initial
begin
	const6_expected[24] = 1'bX;
end 
// expected const6[ 23 ]
initial
begin
	const6_expected[23] = 1'bX;
end 
// expected const6[ 22 ]
initial
begin
	const6_expected[22] = 1'bX;
end 
// expected const6[ 21 ]
initial
begin
	const6_expected[21] = 1'bX;
end 
// expected const6[ 20 ]
initial
begin
	const6_expected[20] = 1'bX;
end 
// expected const6[ 19 ]
initial
begin
	const6_expected[19] = 1'bX;
end 
// expected const6[ 18 ]
initial
begin
	const6_expected[18] = 1'bX;
end 
// expected const6[ 17 ]
initial
begin
	const6_expected[17] = 1'bX;
end 
// expected const6[ 16 ]
initial
begin
	const6_expected[16] = 1'bX;
end 
// expected const6[ 15 ]
initial
begin
	const6_expected[15] = 1'bX;
end 
// expected const6[ 14 ]
initial
begin
	const6_expected[14] = 1'bX;
end 
// expected const6[ 13 ]
initial
begin
	const6_expected[13] = 1'bX;
end 
// expected const6[ 12 ]
initial
begin
	const6_expected[12] = 1'bX;
end 
// expected const6[ 11 ]
initial
begin
	const6_expected[11] = 1'bX;
end 
// expected const6[ 10 ]
initial
begin
	const6_expected[10] = 1'bX;
end 
// expected const6[ 9 ]
initial
begin
	const6_expected[9] = 1'bX;
end 
// expected const6[ 8 ]
initial
begin
	const6_expected[8] = 1'bX;
end 
// expected const6[ 7 ]
initial
begin
	const6_expected[7] = 1'bX;
end 
// expected const6[ 6 ]
initial
begin
	const6_expected[6] = 1'bX;
end 
// expected const6[ 5 ]
initial
begin
	const6_expected[5] = 1'bX;
end 
// expected const6[ 4 ]
initial
begin
	const6_expected[4] = 1'bX;
end 
// expected const6[ 3 ]
initial
begin
	const6_expected[3] = 1'bX;
end 
// expected const6[ 2 ]
initial
begin
	const6_expected[2] = 1'bX;
end 
// expected const6[ 1 ]
initial
begin
	const6_expected[1] = 1'bX;
end 
// expected const6[ 0 ]
initial
begin
	const6_expected[0] = 1'bX;
end 
// expected const120[ 31 ]
initial
begin
	const120_expected[31] = 1'bX;
end 
// expected const120[ 30 ]
initial
begin
	const120_expected[30] = 1'bX;
end 
// expected const120[ 29 ]
initial
begin
	const120_expected[29] = 1'bX;
end 
// expected const120[ 28 ]
initial
begin
	const120_expected[28] = 1'bX;
end 
// expected const120[ 27 ]
initial
begin
	const120_expected[27] = 1'bX;
end 
// expected const120[ 26 ]
initial
begin
	const120_expected[26] = 1'bX;
end 
// expected const120[ 25 ]
initial
begin
	const120_expected[25] = 1'bX;
end 
// expected const120[ 24 ]
initial
begin
	const120_expected[24] = 1'bX;
end 
// expected const120[ 23 ]
initial
begin
	const120_expected[23] = 1'bX;
end 
// expected const120[ 22 ]
initial
begin
	const120_expected[22] = 1'bX;
end 
// expected const120[ 21 ]
initial
begin
	const120_expected[21] = 1'bX;
end 
// expected const120[ 20 ]
initial
begin
	const120_expected[20] = 1'bX;
end 
// expected const120[ 19 ]
initial
begin
	const120_expected[19] = 1'bX;
end 
// expected const120[ 18 ]
initial
begin
	const120_expected[18] = 1'bX;
end 
// expected const120[ 17 ]
initial
begin
	const120_expected[17] = 1'bX;
end 
// expected const120[ 16 ]
initial
begin
	const120_expected[16] = 1'bX;
end 
// expected const120[ 15 ]
initial
begin
	const120_expected[15] = 1'bX;
end 
// expected const120[ 14 ]
initial
begin
	const120_expected[14] = 1'bX;
end 
// expected const120[ 13 ]
initial
begin
	const120_expected[13] = 1'bX;
end 
// expected const120[ 12 ]
initial
begin
	const120_expected[12] = 1'bX;
end 
// expected const120[ 11 ]
initial
begin
	const120_expected[11] = 1'bX;
end 
// expected const120[ 10 ]
initial
begin
	const120_expected[10] = 1'bX;
end 
// expected const120[ 9 ]
initial
begin
	const120_expected[9] = 1'bX;
end 
// expected const120[ 8 ]
initial
begin
	const120_expected[8] = 1'bX;
end 
// expected const120[ 7 ]
initial
begin
	const120_expected[7] = 1'bX;
end 
// expected const120[ 6 ]
initial
begin
	const120_expected[6] = 1'bX;
end 
// expected const120[ 5 ]
initial
begin
	const120_expected[5] = 1'bX;
end 
// expected const120[ 4 ]
initial
begin
	const120_expected[4] = 1'bX;
end 
// expected const120[ 3 ]
initial
begin
	const120_expected[3] = 1'bX;
end 
// expected const120[ 2 ]
initial
begin
	const120_expected[2] = 1'bX;
end 
// expected const120[ 1 ]
initial
begin
	const120_expected[1] = 1'bX;
end 
// expected const120[ 0 ]
initial
begin
	const120_expected[0] = 1'bX;
end 
// expected res_f[ 31 ]
initial
begin
	res_f_expected[31] = 1'bX;
end 
// expected res_f[ 30 ]
initial
begin
	res_f_expected[30] = 1'bX;
end 
// expected res_f[ 29 ]
initial
begin
	res_f_expected[29] = 1'bX;
end 
// expected res_f[ 28 ]
initial
begin
	res_f_expected[28] = 1'bX;
end 
// expected res_f[ 27 ]
initial
begin
	res_f_expected[27] = 1'bX;
end 
// expected res_f[ 26 ]
initial
begin
	res_f_expected[26] = 1'bX;
end 
// expected res_f[ 25 ]
initial
begin
	res_f_expected[25] = 1'bX;
end 
// expected res_f[ 24 ]
initial
begin
	res_f_expected[24] = 1'bX;
end 
// expected res_f[ 23 ]
initial
begin
	res_f_expected[23] = 1'bX;
end 
// expected res_f[ 22 ]
initial
begin
	res_f_expected[22] = 1'bX;
end 
// expected res_f[ 21 ]
initial
begin
	res_f_expected[21] = 1'bX;
end 
// expected res_f[ 20 ]
initial
begin
	res_f_expected[20] = 1'bX;
end 
// expected res_f[ 19 ]
initial
begin
	res_f_expected[19] = 1'bX;
end 
// expected res_f[ 18 ]
initial
begin
	res_f_expected[18] = 1'bX;
end 
// expected res_f[ 17 ]
initial
begin
	res_f_expected[17] = 1'bX;
end 
// expected res_f[ 16 ]
initial
begin
	res_f_expected[16] = 1'bX;
end 
// expected res_f[ 15 ]
initial
begin
	res_f_expected[15] = 1'bX;
end 
// expected res_f[ 14 ]
initial
begin
	res_f_expected[14] = 1'bX;
end 
// expected res_f[ 13 ]
initial
begin
	res_f_expected[13] = 1'bX;
end 
// expected res_f[ 12 ]
initial
begin
	res_f_expected[12] = 1'bX;
end 
// expected res_f[ 11 ]
initial
begin
	res_f_expected[11] = 1'bX;
end 
// expected res_f[ 10 ]
initial
begin
	res_f_expected[10] = 1'bX;
end 
// expected res_f[ 9 ]
initial
begin
	res_f_expected[9] = 1'bX;
end 
// expected res_f[ 8 ]
initial
begin
	res_f_expected[8] = 1'bX;
end 
// expected res_f[ 7 ]
initial
begin
	res_f_expected[7] = 1'bX;
end 
// expected res_f[ 6 ]
initial
begin
	res_f_expected[6] = 1'bX;
end 
// expected res_f[ 5 ]
initial
begin
	res_f_expected[5] = 1'bX;
end 
// expected res_f[ 4 ]
initial
begin
	res_f_expected[4] = 1'bX;
end 
// expected res_f[ 3 ]
initial
begin
	res_f_expected[3] = 1'bX;
end 
// expected res_f[ 2 ]
initial
begin
	res_f_expected[2] = 1'bX;
end 
// expected res_f[ 1 ]
initial
begin
	res_f_expected[1] = 1'bX;
end 
// expected res_f[ 0 ]
initial
begin
	res_f_expected[0] = 1'bX;
end 
// expected sinx[ 31 ]
initial
begin
	sinx_expected[31] = 1'bX;
	sinx_expected[31] = #999000 1'b0;
end 
// expected sinx[ 30 ]
initial
begin
	sinx_expected[30] = 1'bX;
	sinx_expected[30] = #999000 1'b0;
end 
// expected sinx[ 29 ]
initial
begin
	sinx_expected[29] = 1'bX;
	sinx_expected[29] = #999000 1'b0;
end 
// expected sinx[ 28 ]
initial
begin
	sinx_expected[28] = 1'bX;
	sinx_expected[28] = #999000 1'b0;
end 
// expected sinx[ 27 ]
initial
begin
	sinx_expected[27] = 1'bX;
	sinx_expected[27] = #999000 1'b0;
end 
// expected sinx[ 26 ]
initial
begin
	sinx_expected[26] = 1'bX;
	sinx_expected[26] = #999000 1'b0;
end 
// expected sinx[ 25 ]
initial
begin
	sinx_expected[25] = 1'bX;
	sinx_expected[25] = #999000 1'b0;
end 
// expected sinx[ 24 ]
initial
begin
	sinx_expected[24] = 1'bX;
	sinx_expected[24] = #999000 1'b0;
end 
// expected sinx[ 23 ]
initial
begin
	sinx_expected[23] = 1'bX;
	sinx_expected[23] = #999000 1'b0;
end 
// expected sinx[ 22 ]
initial
begin
	sinx_expected[22] = 1'bX;
	sinx_expected[22] = #999000 1'b0;
end 
// expected sinx[ 21 ]
initial
begin
	sinx_expected[21] = 1'bX;
	sinx_expected[21] = #999000 1'b0;
end 
// expected sinx[ 20 ]
initial
begin
	sinx_expected[20] = 1'bX;
	sinx_expected[20] = #999000 1'b0;
end 
// expected sinx[ 19 ]
initial
begin
	sinx_expected[19] = 1'bX;
	sinx_expected[19] = #999000 1'b0;
end 
// expected sinx[ 18 ]
initial
begin
	sinx_expected[18] = 1'bX;
	sinx_expected[18] = #999000 1'b0;
end 
// expected sinx[ 17 ]
initial
begin
	sinx_expected[17] = 1'bX;
	sinx_expected[17] = #999000 1'b0;
end 
// expected sinx[ 16 ]
initial
begin
	sinx_expected[16] = 1'bX;
	sinx_expected[16] = #999000 1'b0;
end 
// expected sinx[ 15 ]
initial
begin
	sinx_expected[15] = 1'bX;
	sinx_expected[15] = #999000 1'b0;
end 
// expected sinx[ 14 ]
initial
begin
	sinx_expected[14] = 1'bX;
	sinx_expected[14] = #999000 1'b0;
end 
// expected sinx[ 13 ]
initial
begin
	sinx_expected[13] = 1'bX;
	sinx_expected[13] = #999000 1'b0;
end 
// expected sinx[ 12 ]
initial
begin
	sinx_expected[12] = 1'bX;
	sinx_expected[12] = #999000 1'b0;
end 
// expected sinx[ 11 ]
initial
begin
	sinx_expected[11] = 1'bX;
	sinx_expected[11] = #999000 1'b0;
end 
// expected sinx[ 10 ]
initial
begin
	sinx_expected[10] = 1'bX;
	sinx_expected[10] = #999000 1'b0;
end 
// expected sinx[ 9 ]
initial
begin
	sinx_expected[9] = 1'bX;
	sinx_expected[9] = #999000 1'b0;
end 
// expected sinx[ 8 ]
initial
begin
	sinx_expected[8] = 1'bX;
	sinx_expected[8] = #999000 1'b0;
end 
// expected sinx[ 7 ]
initial
begin
	sinx_expected[7] = 1'bX;
	sinx_expected[7] = #999000 1'b0;
end 
// expected sinx[ 6 ]
initial
begin
	sinx_expected[6] = 1'bX;
	sinx_expected[6] = #999000 1'b0;
end 
// expected sinx[ 5 ]
initial
begin
	sinx_expected[5] = 1'bX;
	sinx_expected[5] = #999000 1'b0;
end 
// expected sinx[ 4 ]
initial
begin
	sinx_expected[4] = 1'bX;
	sinx_expected[4] = #999000 1'b0;
end 
// expected sinx[ 3 ]
initial
begin
	sinx_expected[3] = 1'bX;
	sinx_expected[3] = #999000 1'b0;
end 
// expected sinx[ 2 ]
initial
begin
	sinx_expected[2] = 1'bX;
	sinx_expected[2] = #999000 1'b0;
end 
// expected sinx[ 1 ]
initial
begin
	sinx_expected[1] = 1'bX;
	sinx_expected[1] = #999000 1'b0;
end 
// expected sinx[ 0 ]
initial
begin
	sinx_expected[0] = 1'bX;
	sinx_expected[0] = #999000 1'b0;
end 
// generate trigger
always @(const6_expected or const6 or const120_expected or const120 or res_f_expected or res_f or sinx_expected or sinx or x_f_expected or x_f or xpow2_expected or xpow2 or xpow3_expected or xpow3 or xpow5_expected or xpow5)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected const6 = %b | expected const120 = %b | expected res_f = %b | expected sinx = %b | expected x_f = %b | expected xpow2 = %b | expected xpow3 = %b | expected xpow5 = %b | ",const6_expected_prev,const120_expected_prev,res_f_expected_prev,sinx_expected_prev,x_f_expected_prev,xpow2_expected_prev,xpow3_expected_prev,xpow5_expected_prev);
	$display("| real const6 = %b | real const120 = %b | real res_f = %b | real sinx = %b | real x_f = %b | real xpow2 = %b | real xpow3 = %b | real xpow5 = %b | ",const6_prev,const120_prev,res_f_prev,sinx_prev,x_f_prev,xpow2_prev,xpow3_prev,xpow5_prev);
`endif
	if (
		( const6_expected_prev[0] !== 1'bx ) && ( const6_prev[0] !== const6_expected_prev[0] )
		&& ((const6_expected_prev[0] !== last_const6_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const6[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const6_expected_prev);
		$display ("     Real value = %b", const6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_const6_exp[0] = const6_expected_prev[0];
	end
	if (
		( const6_expected_prev[1] !== 1'bx ) && ( const6_prev[1] !== const6_expected_prev[1] )
		&& ((const6_expected_prev[1] !== last_const6_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const6[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const6_expected_prev);
		$display ("     Real value = %b", const6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_const6_exp[1] = const6_expected_prev[1];
	end
	if (
		( const6_expected_prev[2] !== 1'bx ) && ( const6_prev[2] !== const6_expected_prev[2] )
		&& ((const6_expected_prev[2] !== last_const6_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const6[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const6_expected_prev);
		$display ("     Real value = %b", const6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_const6_exp[2] = const6_expected_prev[2];
	end
	if (
		( const6_expected_prev[3] !== 1'bx ) && ( const6_prev[3] !== const6_expected_prev[3] )
		&& ((const6_expected_prev[3] !== last_const6_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const6[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const6_expected_prev);
		$display ("     Real value = %b", const6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_const6_exp[3] = const6_expected_prev[3];
	end
	if (
		( const6_expected_prev[4] !== 1'bx ) && ( const6_prev[4] !== const6_expected_prev[4] )
		&& ((const6_expected_prev[4] !== last_const6_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const6[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const6_expected_prev);
		$display ("     Real value = %b", const6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_const6_exp[4] = const6_expected_prev[4];
	end
	if (
		( const6_expected_prev[5] !== 1'bx ) && ( const6_prev[5] !== const6_expected_prev[5] )
		&& ((const6_expected_prev[5] !== last_const6_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const6[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const6_expected_prev);
		$display ("     Real value = %b", const6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_const6_exp[5] = const6_expected_prev[5];
	end
	if (
		( const6_expected_prev[6] !== 1'bx ) && ( const6_prev[6] !== const6_expected_prev[6] )
		&& ((const6_expected_prev[6] !== last_const6_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const6[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const6_expected_prev);
		$display ("     Real value = %b", const6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_const6_exp[6] = const6_expected_prev[6];
	end
	if (
		( const6_expected_prev[7] !== 1'bx ) && ( const6_prev[7] !== const6_expected_prev[7] )
		&& ((const6_expected_prev[7] !== last_const6_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const6[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const6_expected_prev);
		$display ("     Real value = %b", const6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_const6_exp[7] = const6_expected_prev[7];
	end
	if (
		( const6_expected_prev[8] !== 1'bx ) && ( const6_prev[8] !== const6_expected_prev[8] )
		&& ((const6_expected_prev[8] !== last_const6_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const6[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const6_expected_prev);
		$display ("     Real value = %b", const6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_const6_exp[8] = const6_expected_prev[8];
	end
	if (
		( const6_expected_prev[9] !== 1'bx ) && ( const6_prev[9] !== const6_expected_prev[9] )
		&& ((const6_expected_prev[9] !== last_const6_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const6[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const6_expected_prev);
		$display ("     Real value = %b", const6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_const6_exp[9] = const6_expected_prev[9];
	end
	if (
		( const6_expected_prev[10] !== 1'bx ) && ( const6_prev[10] !== const6_expected_prev[10] )
		&& ((const6_expected_prev[10] !== last_const6_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const6[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const6_expected_prev);
		$display ("     Real value = %b", const6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_const6_exp[10] = const6_expected_prev[10];
	end
	if (
		( const6_expected_prev[11] !== 1'bx ) && ( const6_prev[11] !== const6_expected_prev[11] )
		&& ((const6_expected_prev[11] !== last_const6_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const6[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const6_expected_prev);
		$display ("     Real value = %b", const6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_const6_exp[11] = const6_expected_prev[11];
	end
	if (
		( const6_expected_prev[12] !== 1'bx ) && ( const6_prev[12] !== const6_expected_prev[12] )
		&& ((const6_expected_prev[12] !== last_const6_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const6[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const6_expected_prev);
		$display ("     Real value = %b", const6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_const6_exp[12] = const6_expected_prev[12];
	end
	if (
		( const6_expected_prev[13] !== 1'bx ) && ( const6_prev[13] !== const6_expected_prev[13] )
		&& ((const6_expected_prev[13] !== last_const6_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const6[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const6_expected_prev);
		$display ("     Real value = %b", const6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_const6_exp[13] = const6_expected_prev[13];
	end
	if (
		( const6_expected_prev[14] !== 1'bx ) && ( const6_prev[14] !== const6_expected_prev[14] )
		&& ((const6_expected_prev[14] !== last_const6_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const6[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const6_expected_prev);
		$display ("     Real value = %b", const6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_const6_exp[14] = const6_expected_prev[14];
	end
	if (
		( const6_expected_prev[15] !== 1'bx ) && ( const6_prev[15] !== const6_expected_prev[15] )
		&& ((const6_expected_prev[15] !== last_const6_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const6[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const6_expected_prev);
		$display ("     Real value = %b", const6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_const6_exp[15] = const6_expected_prev[15];
	end
	if (
		( const6_expected_prev[16] !== 1'bx ) && ( const6_prev[16] !== const6_expected_prev[16] )
		&& ((const6_expected_prev[16] !== last_const6_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const6[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const6_expected_prev);
		$display ("     Real value = %b", const6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_const6_exp[16] = const6_expected_prev[16];
	end
	if (
		( const6_expected_prev[17] !== 1'bx ) && ( const6_prev[17] !== const6_expected_prev[17] )
		&& ((const6_expected_prev[17] !== last_const6_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const6[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const6_expected_prev);
		$display ("     Real value = %b", const6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_const6_exp[17] = const6_expected_prev[17];
	end
	if (
		( const6_expected_prev[18] !== 1'bx ) && ( const6_prev[18] !== const6_expected_prev[18] )
		&& ((const6_expected_prev[18] !== last_const6_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const6[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const6_expected_prev);
		$display ("     Real value = %b", const6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_const6_exp[18] = const6_expected_prev[18];
	end
	if (
		( const6_expected_prev[19] !== 1'bx ) && ( const6_prev[19] !== const6_expected_prev[19] )
		&& ((const6_expected_prev[19] !== last_const6_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const6[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const6_expected_prev);
		$display ("     Real value = %b", const6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_const6_exp[19] = const6_expected_prev[19];
	end
	if (
		( const6_expected_prev[20] !== 1'bx ) && ( const6_prev[20] !== const6_expected_prev[20] )
		&& ((const6_expected_prev[20] !== last_const6_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const6[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const6_expected_prev);
		$display ("     Real value = %b", const6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_const6_exp[20] = const6_expected_prev[20];
	end
	if (
		( const6_expected_prev[21] !== 1'bx ) && ( const6_prev[21] !== const6_expected_prev[21] )
		&& ((const6_expected_prev[21] !== last_const6_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const6[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const6_expected_prev);
		$display ("     Real value = %b", const6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_const6_exp[21] = const6_expected_prev[21];
	end
	if (
		( const6_expected_prev[22] !== 1'bx ) && ( const6_prev[22] !== const6_expected_prev[22] )
		&& ((const6_expected_prev[22] !== last_const6_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const6[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const6_expected_prev);
		$display ("     Real value = %b", const6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_const6_exp[22] = const6_expected_prev[22];
	end
	if (
		( const6_expected_prev[23] !== 1'bx ) && ( const6_prev[23] !== const6_expected_prev[23] )
		&& ((const6_expected_prev[23] !== last_const6_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const6[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const6_expected_prev);
		$display ("     Real value = %b", const6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_const6_exp[23] = const6_expected_prev[23];
	end
	if (
		( const6_expected_prev[24] !== 1'bx ) && ( const6_prev[24] !== const6_expected_prev[24] )
		&& ((const6_expected_prev[24] !== last_const6_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const6[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const6_expected_prev);
		$display ("     Real value = %b", const6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_const6_exp[24] = const6_expected_prev[24];
	end
	if (
		( const6_expected_prev[25] !== 1'bx ) && ( const6_prev[25] !== const6_expected_prev[25] )
		&& ((const6_expected_prev[25] !== last_const6_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const6[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const6_expected_prev);
		$display ("     Real value = %b", const6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_const6_exp[25] = const6_expected_prev[25];
	end
	if (
		( const6_expected_prev[26] !== 1'bx ) && ( const6_prev[26] !== const6_expected_prev[26] )
		&& ((const6_expected_prev[26] !== last_const6_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const6[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const6_expected_prev);
		$display ("     Real value = %b", const6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_const6_exp[26] = const6_expected_prev[26];
	end
	if (
		( const6_expected_prev[27] !== 1'bx ) && ( const6_prev[27] !== const6_expected_prev[27] )
		&& ((const6_expected_prev[27] !== last_const6_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const6[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const6_expected_prev);
		$display ("     Real value = %b", const6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_const6_exp[27] = const6_expected_prev[27];
	end
	if (
		( const6_expected_prev[28] !== 1'bx ) && ( const6_prev[28] !== const6_expected_prev[28] )
		&& ((const6_expected_prev[28] !== last_const6_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const6[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const6_expected_prev);
		$display ("     Real value = %b", const6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_const6_exp[28] = const6_expected_prev[28];
	end
	if (
		( const6_expected_prev[29] !== 1'bx ) && ( const6_prev[29] !== const6_expected_prev[29] )
		&& ((const6_expected_prev[29] !== last_const6_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const6[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const6_expected_prev);
		$display ("     Real value = %b", const6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_const6_exp[29] = const6_expected_prev[29];
	end
	if (
		( const6_expected_prev[30] !== 1'bx ) && ( const6_prev[30] !== const6_expected_prev[30] )
		&& ((const6_expected_prev[30] !== last_const6_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const6[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const6_expected_prev);
		$display ("     Real value = %b", const6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_const6_exp[30] = const6_expected_prev[30];
	end
	if (
		( const6_expected_prev[31] !== 1'bx ) && ( const6_prev[31] !== const6_expected_prev[31] )
		&& ((const6_expected_prev[31] !== last_const6_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const6[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const6_expected_prev);
		$display ("     Real value = %b", const6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_const6_exp[31] = const6_expected_prev[31];
	end
	if (
		( const120_expected_prev[0] !== 1'bx ) && ( const120_prev[0] !== const120_expected_prev[0] )
		&& ((const120_expected_prev[0] !== last_const120_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const120[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const120_expected_prev);
		$display ("     Real value = %b", const120_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_const120_exp[0] = const120_expected_prev[0];
	end
	if (
		( const120_expected_prev[1] !== 1'bx ) && ( const120_prev[1] !== const120_expected_prev[1] )
		&& ((const120_expected_prev[1] !== last_const120_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const120[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const120_expected_prev);
		$display ("     Real value = %b", const120_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_const120_exp[1] = const120_expected_prev[1];
	end
	if (
		( const120_expected_prev[2] !== 1'bx ) && ( const120_prev[2] !== const120_expected_prev[2] )
		&& ((const120_expected_prev[2] !== last_const120_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const120[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const120_expected_prev);
		$display ("     Real value = %b", const120_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_const120_exp[2] = const120_expected_prev[2];
	end
	if (
		( const120_expected_prev[3] !== 1'bx ) && ( const120_prev[3] !== const120_expected_prev[3] )
		&& ((const120_expected_prev[3] !== last_const120_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const120[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const120_expected_prev);
		$display ("     Real value = %b", const120_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_const120_exp[3] = const120_expected_prev[3];
	end
	if (
		( const120_expected_prev[4] !== 1'bx ) && ( const120_prev[4] !== const120_expected_prev[4] )
		&& ((const120_expected_prev[4] !== last_const120_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const120[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const120_expected_prev);
		$display ("     Real value = %b", const120_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_const120_exp[4] = const120_expected_prev[4];
	end
	if (
		( const120_expected_prev[5] !== 1'bx ) && ( const120_prev[5] !== const120_expected_prev[5] )
		&& ((const120_expected_prev[5] !== last_const120_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const120[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const120_expected_prev);
		$display ("     Real value = %b", const120_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_const120_exp[5] = const120_expected_prev[5];
	end
	if (
		( const120_expected_prev[6] !== 1'bx ) && ( const120_prev[6] !== const120_expected_prev[6] )
		&& ((const120_expected_prev[6] !== last_const120_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const120[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const120_expected_prev);
		$display ("     Real value = %b", const120_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_const120_exp[6] = const120_expected_prev[6];
	end
	if (
		( const120_expected_prev[7] !== 1'bx ) && ( const120_prev[7] !== const120_expected_prev[7] )
		&& ((const120_expected_prev[7] !== last_const120_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const120[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const120_expected_prev);
		$display ("     Real value = %b", const120_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_const120_exp[7] = const120_expected_prev[7];
	end
	if (
		( const120_expected_prev[8] !== 1'bx ) && ( const120_prev[8] !== const120_expected_prev[8] )
		&& ((const120_expected_prev[8] !== last_const120_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const120[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const120_expected_prev);
		$display ("     Real value = %b", const120_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_const120_exp[8] = const120_expected_prev[8];
	end
	if (
		( const120_expected_prev[9] !== 1'bx ) && ( const120_prev[9] !== const120_expected_prev[9] )
		&& ((const120_expected_prev[9] !== last_const120_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const120[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const120_expected_prev);
		$display ("     Real value = %b", const120_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_const120_exp[9] = const120_expected_prev[9];
	end
	if (
		( const120_expected_prev[10] !== 1'bx ) && ( const120_prev[10] !== const120_expected_prev[10] )
		&& ((const120_expected_prev[10] !== last_const120_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const120[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const120_expected_prev);
		$display ("     Real value = %b", const120_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_const120_exp[10] = const120_expected_prev[10];
	end
	if (
		( const120_expected_prev[11] !== 1'bx ) && ( const120_prev[11] !== const120_expected_prev[11] )
		&& ((const120_expected_prev[11] !== last_const120_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const120[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const120_expected_prev);
		$display ("     Real value = %b", const120_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_const120_exp[11] = const120_expected_prev[11];
	end
	if (
		( const120_expected_prev[12] !== 1'bx ) && ( const120_prev[12] !== const120_expected_prev[12] )
		&& ((const120_expected_prev[12] !== last_const120_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const120[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const120_expected_prev);
		$display ("     Real value = %b", const120_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_const120_exp[12] = const120_expected_prev[12];
	end
	if (
		( const120_expected_prev[13] !== 1'bx ) && ( const120_prev[13] !== const120_expected_prev[13] )
		&& ((const120_expected_prev[13] !== last_const120_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const120[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const120_expected_prev);
		$display ("     Real value = %b", const120_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_const120_exp[13] = const120_expected_prev[13];
	end
	if (
		( const120_expected_prev[14] !== 1'bx ) && ( const120_prev[14] !== const120_expected_prev[14] )
		&& ((const120_expected_prev[14] !== last_const120_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const120[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const120_expected_prev);
		$display ("     Real value = %b", const120_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_const120_exp[14] = const120_expected_prev[14];
	end
	if (
		( const120_expected_prev[15] !== 1'bx ) && ( const120_prev[15] !== const120_expected_prev[15] )
		&& ((const120_expected_prev[15] !== last_const120_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const120[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const120_expected_prev);
		$display ("     Real value = %b", const120_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_const120_exp[15] = const120_expected_prev[15];
	end
	if (
		( const120_expected_prev[16] !== 1'bx ) && ( const120_prev[16] !== const120_expected_prev[16] )
		&& ((const120_expected_prev[16] !== last_const120_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const120[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const120_expected_prev);
		$display ("     Real value = %b", const120_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_const120_exp[16] = const120_expected_prev[16];
	end
	if (
		( const120_expected_prev[17] !== 1'bx ) && ( const120_prev[17] !== const120_expected_prev[17] )
		&& ((const120_expected_prev[17] !== last_const120_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const120[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const120_expected_prev);
		$display ("     Real value = %b", const120_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_const120_exp[17] = const120_expected_prev[17];
	end
	if (
		( const120_expected_prev[18] !== 1'bx ) && ( const120_prev[18] !== const120_expected_prev[18] )
		&& ((const120_expected_prev[18] !== last_const120_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const120[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const120_expected_prev);
		$display ("     Real value = %b", const120_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_const120_exp[18] = const120_expected_prev[18];
	end
	if (
		( const120_expected_prev[19] !== 1'bx ) && ( const120_prev[19] !== const120_expected_prev[19] )
		&& ((const120_expected_prev[19] !== last_const120_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const120[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const120_expected_prev);
		$display ("     Real value = %b", const120_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_const120_exp[19] = const120_expected_prev[19];
	end
	if (
		( const120_expected_prev[20] !== 1'bx ) && ( const120_prev[20] !== const120_expected_prev[20] )
		&& ((const120_expected_prev[20] !== last_const120_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const120[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const120_expected_prev);
		$display ("     Real value = %b", const120_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_const120_exp[20] = const120_expected_prev[20];
	end
	if (
		( const120_expected_prev[21] !== 1'bx ) && ( const120_prev[21] !== const120_expected_prev[21] )
		&& ((const120_expected_prev[21] !== last_const120_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const120[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const120_expected_prev);
		$display ("     Real value = %b", const120_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_const120_exp[21] = const120_expected_prev[21];
	end
	if (
		( const120_expected_prev[22] !== 1'bx ) && ( const120_prev[22] !== const120_expected_prev[22] )
		&& ((const120_expected_prev[22] !== last_const120_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const120[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const120_expected_prev);
		$display ("     Real value = %b", const120_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_const120_exp[22] = const120_expected_prev[22];
	end
	if (
		( const120_expected_prev[23] !== 1'bx ) && ( const120_prev[23] !== const120_expected_prev[23] )
		&& ((const120_expected_prev[23] !== last_const120_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const120[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const120_expected_prev);
		$display ("     Real value = %b", const120_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_const120_exp[23] = const120_expected_prev[23];
	end
	if (
		( const120_expected_prev[24] !== 1'bx ) && ( const120_prev[24] !== const120_expected_prev[24] )
		&& ((const120_expected_prev[24] !== last_const120_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const120[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const120_expected_prev);
		$display ("     Real value = %b", const120_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_const120_exp[24] = const120_expected_prev[24];
	end
	if (
		( const120_expected_prev[25] !== 1'bx ) && ( const120_prev[25] !== const120_expected_prev[25] )
		&& ((const120_expected_prev[25] !== last_const120_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const120[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const120_expected_prev);
		$display ("     Real value = %b", const120_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_const120_exp[25] = const120_expected_prev[25];
	end
	if (
		( const120_expected_prev[26] !== 1'bx ) && ( const120_prev[26] !== const120_expected_prev[26] )
		&& ((const120_expected_prev[26] !== last_const120_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const120[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const120_expected_prev);
		$display ("     Real value = %b", const120_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_const120_exp[26] = const120_expected_prev[26];
	end
	if (
		( const120_expected_prev[27] !== 1'bx ) && ( const120_prev[27] !== const120_expected_prev[27] )
		&& ((const120_expected_prev[27] !== last_const120_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const120[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const120_expected_prev);
		$display ("     Real value = %b", const120_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_const120_exp[27] = const120_expected_prev[27];
	end
	if (
		( const120_expected_prev[28] !== 1'bx ) && ( const120_prev[28] !== const120_expected_prev[28] )
		&& ((const120_expected_prev[28] !== last_const120_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const120[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const120_expected_prev);
		$display ("     Real value = %b", const120_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_const120_exp[28] = const120_expected_prev[28];
	end
	if (
		( const120_expected_prev[29] !== 1'bx ) && ( const120_prev[29] !== const120_expected_prev[29] )
		&& ((const120_expected_prev[29] !== last_const120_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const120[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const120_expected_prev);
		$display ("     Real value = %b", const120_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_const120_exp[29] = const120_expected_prev[29];
	end
	if (
		( const120_expected_prev[30] !== 1'bx ) && ( const120_prev[30] !== const120_expected_prev[30] )
		&& ((const120_expected_prev[30] !== last_const120_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const120[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const120_expected_prev);
		$display ("     Real value = %b", const120_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_const120_exp[30] = const120_expected_prev[30];
	end
	if (
		( const120_expected_prev[31] !== 1'bx ) && ( const120_prev[31] !== const120_expected_prev[31] )
		&& ((const120_expected_prev[31] !== last_const120_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port const120[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", const120_expected_prev);
		$display ("     Real value = %b", const120_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_const120_exp[31] = const120_expected_prev[31];
	end
	if (
		( res_f_expected_prev[0] !== 1'bx ) && ( res_f_prev[0] !== res_f_expected_prev[0] )
		&& ((res_f_expected_prev[0] !== last_res_f_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res_f[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_f_expected_prev);
		$display ("     Real value = %b", res_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_res_f_exp[0] = res_f_expected_prev[0];
	end
	if (
		( res_f_expected_prev[1] !== 1'bx ) && ( res_f_prev[1] !== res_f_expected_prev[1] )
		&& ((res_f_expected_prev[1] !== last_res_f_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res_f[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_f_expected_prev);
		$display ("     Real value = %b", res_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_res_f_exp[1] = res_f_expected_prev[1];
	end
	if (
		( res_f_expected_prev[2] !== 1'bx ) && ( res_f_prev[2] !== res_f_expected_prev[2] )
		&& ((res_f_expected_prev[2] !== last_res_f_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res_f[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_f_expected_prev);
		$display ("     Real value = %b", res_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_res_f_exp[2] = res_f_expected_prev[2];
	end
	if (
		( res_f_expected_prev[3] !== 1'bx ) && ( res_f_prev[3] !== res_f_expected_prev[3] )
		&& ((res_f_expected_prev[3] !== last_res_f_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res_f[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_f_expected_prev);
		$display ("     Real value = %b", res_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_res_f_exp[3] = res_f_expected_prev[3];
	end
	if (
		( res_f_expected_prev[4] !== 1'bx ) && ( res_f_prev[4] !== res_f_expected_prev[4] )
		&& ((res_f_expected_prev[4] !== last_res_f_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res_f[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_f_expected_prev);
		$display ("     Real value = %b", res_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_res_f_exp[4] = res_f_expected_prev[4];
	end
	if (
		( res_f_expected_prev[5] !== 1'bx ) && ( res_f_prev[5] !== res_f_expected_prev[5] )
		&& ((res_f_expected_prev[5] !== last_res_f_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res_f[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_f_expected_prev);
		$display ("     Real value = %b", res_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_res_f_exp[5] = res_f_expected_prev[5];
	end
	if (
		( res_f_expected_prev[6] !== 1'bx ) && ( res_f_prev[6] !== res_f_expected_prev[6] )
		&& ((res_f_expected_prev[6] !== last_res_f_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res_f[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_f_expected_prev);
		$display ("     Real value = %b", res_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_res_f_exp[6] = res_f_expected_prev[6];
	end
	if (
		( res_f_expected_prev[7] !== 1'bx ) && ( res_f_prev[7] !== res_f_expected_prev[7] )
		&& ((res_f_expected_prev[7] !== last_res_f_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res_f[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_f_expected_prev);
		$display ("     Real value = %b", res_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_res_f_exp[7] = res_f_expected_prev[7];
	end
	if (
		( res_f_expected_prev[8] !== 1'bx ) && ( res_f_prev[8] !== res_f_expected_prev[8] )
		&& ((res_f_expected_prev[8] !== last_res_f_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res_f[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_f_expected_prev);
		$display ("     Real value = %b", res_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_res_f_exp[8] = res_f_expected_prev[8];
	end
	if (
		( res_f_expected_prev[9] !== 1'bx ) && ( res_f_prev[9] !== res_f_expected_prev[9] )
		&& ((res_f_expected_prev[9] !== last_res_f_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res_f[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_f_expected_prev);
		$display ("     Real value = %b", res_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_res_f_exp[9] = res_f_expected_prev[9];
	end
	if (
		( res_f_expected_prev[10] !== 1'bx ) && ( res_f_prev[10] !== res_f_expected_prev[10] )
		&& ((res_f_expected_prev[10] !== last_res_f_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res_f[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_f_expected_prev);
		$display ("     Real value = %b", res_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_res_f_exp[10] = res_f_expected_prev[10];
	end
	if (
		( res_f_expected_prev[11] !== 1'bx ) && ( res_f_prev[11] !== res_f_expected_prev[11] )
		&& ((res_f_expected_prev[11] !== last_res_f_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res_f[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_f_expected_prev);
		$display ("     Real value = %b", res_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_res_f_exp[11] = res_f_expected_prev[11];
	end
	if (
		( res_f_expected_prev[12] !== 1'bx ) && ( res_f_prev[12] !== res_f_expected_prev[12] )
		&& ((res_f_expected_prev[12] !== last_res_f_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res_f[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_f_expected_prev);
		$display ("     Real value = %b", res_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_res_f_exp[12] = res_f_expected_prev[12];
	end
	if (
		( res_f_expected_prev[13] !== 1'bx ) && ( res_f_prev[13] !== res_f_expected_prev[13] )
		&& ((res_f_expected_prev[13] !== last_res_f_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res_f[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_f_expected_prev);
		$display ("     Real value = %b", res_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_res_f_exp[13] = res_f_expected_prev[13];
	end
	if (
		( res_f_expected_prev[14] !== 1'bx ) && ( res_f_prev[14] !== res_f_expected_prev[14] )
		&& ((res_f_expected_prev[14] !== last_res_f_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res_f[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_f_expected_prev);
		$display ("     Real value = %b", res_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_res_f_exp[14] = res_f_expected_prev[14];
	end
	if (
		( res_f_expected_prev[15] !== 1'bx ) && ( res_f_prev[15] !== res_f_expected_prev[15] )
		&& ((res_f_expected_prev[15] !== last_res_f_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res_f[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_f_expected_prev);
		$display ("     Real value = %b", res_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_res_f_exp[15] = res_f_expected_prev[15];
	end
	if (
		( res_f_expected_prev[16] !== 1'bx ) && ( res_f_prev[16] !== res_f_expected_prev[16] )
		&& ((res_f_expected_prev[16] !== last_res_f_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res_f[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_f_expected_prev);
		$display ("     Real value = %b", res_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_res_f_exp[16] = res_f_expected_prev[16];
	end
	if (
		( res_f_expected_prev[17] !== 1'bx ) && ( res_f_prev[17] !== res_f_expected_prev[17] )
		&& ((res_f_expected_prev[17] !== last_res_f_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res_f[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_f_expected_prev);
		$display ("     Real value = %b", res_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_res_f_exp[17] = res_f_expected_prev[17];
	end
	if (
		( res_f_expected_prev[18] !== 1'bx ) && ( res_f_prev[18] !== res_f_expected_prev[18] )
		&& ((res_f_expected_prev[18] !== last_res_f_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res_f[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_f_expected_prev);
		$display ("     Real value = %b", res_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_res_f_exp[18] = res_f_expected_prev[18];
	end
	if (
		( res_f_expected_prev[19] !== 1'bx ) && ( res_f_prev[19] !== res_f_expected_prev[19] )
		&& ((res_f_expected_prev[19] !== last_res_f_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res_f[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_f_expected_prev);
		$display ("     Real value = %b", res_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_res_f_exp[19] = res_f_expected_prev[19];
	end
	if (
		( res_f_expected_prev[20] !== 1'bx ) && ( res_f_prev[20] !== res_f_expected_prev[20] )
		&& ((res_f_expected_prev[20] !== last_res_f_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res_f[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_f_expected_prev);
		$display ("     Real value = %b", res_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_res_f_exp[20] = res_f_expected_prev[20];
	end
	if (
		( res_f_expected_prev[21] !== 1'bx ) && ( res_f_prev[21] !== res_f_expected_prev[21] )
		&& ((res_f_expected_prev[21] !== last_res_f_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res_f[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_f_expected_prev);
		$display ("     Real value = %b", res_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_res_f_exp[21] = res_f_expected_prev[21];
	end
	if (
		( res_f_expected_prev[22] !== 1'bx ) && ( res_f_prev[22] !== res_f_expected_prev[22] )
		&& ((res_f_expected_prev[22] !== last_res_f_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res_f[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_f_expected_prev);
		$display ("     Real value = %b", res_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_res_f_exp[22] = res_f_expected_prev[22];
	end
	if (
		( res_f_expected_prev[23] !== 1'bx ) && ( res_f_prev[23] !== res_f_expected_prev[23] )
		&& ((res_f_expected_prev[23] !== last_res_f_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res_f[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_f_expected_prev);
		$display ("     Real value = %b", res_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_res_f_exp[23] = res_f_expected_prev[23];
	end
	if (
		( res_f_expected_prev[24] !== 1'bx ) && ( res_f_prev[24] !== res_f_expected_prev[24] )
		&& ((res_f_expected_prev[24] !== last_res_f_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res_f[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_f_expected_prev);
		$display ("     Real value = %b", res_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_res_f_exp[24] = res_f_expected_prev[24];
	end
	if (
		( res_f_expected_prev[25] !== 1'bx ) && ( res_f_prev[25] !== res_f_expected_prev[25] )
		&& ((res_f_expected_prev[25] !== last_res_f_exp[25]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res_f[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_f_expected_prev);
		$display ("     Real value = %b", res_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_res_f_exp[25] = res_f_expected_prev[25];
	end
	if (
		( res_f_expected_prev[26] !== 1'bx ) && ( res_f_prev[26] !== res_f_expected_prev[26] )
		&& ((res_f_expected_prev[26] !== last_res_f_exp[26]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res_f[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_f_expected_prev);
		$display ("     Real value = %b", res_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_res_f_exp[26] = res_f_expected_prev[26];
	end
	if (
		( res_f_expected_prev[27] !== 1'bx ) && ( res_f_prev[27] !== res_f_expected_prev[27] )
		&& ((res_f_expected_prev[27] !== last_res_f_exp[27]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res_f[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_f_expected_prev);
		$display ("     Real value = %b", res_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_res_f_exp[27] = res_f_expected_prev[27];
	end
	if (
		( res_f_expected_prev[28] !== 1'bx ) && ( res_f_prev[28] !== res_f_expected_prev[28] )
		&& ((res_f_expected_prev[28] !== last_res_f_exp[28]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res_f[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_f_expected_prev);
		$display ("     Real value = %b", res_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_res_f_exp[28] = res_f_expected_prev[28];
	end
	if (
		( res_f_expected_prev[29] !== 1'bx ) && ( res_f_prev[29] !== res_f_expected_prev[29] )
		&& ((res_f_expected_prev[29] !== last_res_f_exp[29]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res_f[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_f_expected_prev);
		$display ("     Real value = %b", res_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_res_f_exp[29] = res_f_expected_prev[29];
	end
	if (
		( res_f_expected_prev[30] !== 1'bx ) && ( res_f_prev[30] !== res_f_expected_prev[30] )
		&& ((res_f_expected_prev[30] !== last_res_f_exp[30]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res_f[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_f_expected_prev);
		$display ("     Real value = %b", res_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_res_f_exp[30] = res_f_expected_prev[30];
	end
	if (
		( res_f_expected_prev[31] !== 1'bx ) && ( res_f_prev[31] !== res_f_expected_prev[31] )
		&& ((res_f_expected_prev[31] !== last_res_f_exp[31]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res_f[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_f_expected_prev);
		$display ("     Real value = %b", res_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_res_f_exp[31] = res_f_expected_prev[31];
	end
	if (
		( sinx_expected_prev[0] !== 1'bx ) && ( sinx_prev[0] !== sinx_expected_prev[0] )
		&& ((sinx_expected_prev[0] !== last_sinx_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[0] = sinx_expected_prev[0];
	end
	if (
		( sinx_expected_prev[1] !== 1'bx ) && ( sinx_prev[1] !== sinx_expected_prev[1] )
		&& ((sinx_expected_prev[1] !== last_sinx_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[1] = sinx_expected_prev[1];
	end
	if (
		( sinx_expected_prev[2] !== 1'bx ) && ( sinx_prev[2] !== sinx_expected_prev[2] )
		&& ((sinx_expected_prev[2] !== last_sinx_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[2] = sinx_expected_prev[2];
	end
	if (
		( sinx_expected_prev[3] !== 1'bx ) && ( sinx_prev[3] !== sinx_expected_prev[3] )
		&& ((sinx_expected_prev[3] !== last_sinx_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[3] = sinx_expected_prev[3];
	end
	if (
		( sinx_expected_prev[4] !== 1'bx ) && ( sinx_prev[4] !== sinx_expected_prev[4] )
		&& ((sinx_expected_prev[4] !== last_sinx_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[4] = sinx_expected_prev[4];
	end
	if (
		( sinx_expected_prev[5] !== 1'bx ) && ( sinx_prev[5] !== sinx_expected_prev[5] )
		&& ((sinx_expected_prev[5] !== last_sinx_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[5] = sinx_expected_prev[5];
	end
	if (
		( sinx_expected_prev[6] !== 1'bx ) && ( sinx_prev[6] !== sinx_expected_prev[6] )
		&& ((sinx_expected_prev[6] !== last_sinx_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[6] = sinx_expected_prev[6];
	end
	if (
		( sinx_expected_prev[7] !== 1'bx ) && ( sinx_prev[7] !== sinx_expected_prev[7] )
		&& ((sinx_expected_prev[7] !== last_sinx_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[7] = sinx_expected_prev[7];
	end
	if (
		( sinx_expected_prev[8] !== 1'bx ) && ( sinx_prev[8] !== sinx_expected_prev[8] )
		&& ((sinx_expected_prev[8] !== last_sinx_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[8] = sinx_expected_prev[8];
	end
	if (
		( sinx_expected_prev[9] !== 1'bx ) && ( sinx_prev[9] !== sinx_expected_prev[9] )
		&& ((sinx_expected_prev[9] !== last_sinx_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[9] = sinx_expected_prev[9];
	end
	if (
		( sinx_expected_prev[10] !== 1'bx ) && ( sinx_prev[10] !== sinx_expected_prev[10] )
		&& ((sinx_expected_prev[10] !== last_sinx_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[10] = sinx_expected_prev[10];
	end
	if (
		( sinx_expected_prev[11] !== 1'bx ) && ( sinx_prev[11] !== sinx_expected_prev[11] )
		&& ((sinx_expected_prev[11] !== last_sinx_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[11] = sinx_expected_prev[11];
	end
	if (
		( sinx_expected_prev[12] !== 1'bx ) && ( sinx_prev[12] !== sinx_expected_prev[12] )
		&& ((sinx_expected_prev[12] !== last_sinx_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[12] = sinx_expected_prev[12];
	end
	if (
		( sinx_expected_prev[13] !== 1'bx ) && ( sinx_prev[13] !== sinx_expected_prev[13] )
		&& ((sinx_expected_prev[13] !== last_sinx_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[13] = sinx_expected_prev[13];
	end
	if (
		( sinx_expected_prev[14] !== 1'bx ) && ( sinx_prev[14] !== sinx_expected_prev[14] )
		&& ((sinx_expected_prev[14] !== last_sinx_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[14] = sinx_expected_prev[14];
	end
	if (
		( sinx_expected_prev[15] !== 1'bx ) && ( sinx_prev[15] !== sinx_expected_prev[15] )
		&& ((sinx_expected_prev[15] !== last_sinx_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[15] = sinx_expected_prev[15];
	end
	if (
		( sinx_expected_prev[16] !== 1'bx ) && ( sinx_prev[16] !== sinx_expected_prev[16] )
		&& ((sinx_expected_prev[16] !== last_sinx_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[16] = sinx_expected_prev[16];
	end
	if (
		( sinx_expected_prev[17] !== 1'bx ) && ( sinx_prev[17] !== sinx_expected_prev[17] )
		&& ((sinx_expected_prev[17] !== last_sinx_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[17] = sinx_expected_prev[17];
	end
	if (
		( sinx_expected_prev[18] !== 1'bx ) && ( sinx_prev[18] !== sinx_expected_prev[18] )
		&& ((sinx_expected_prev[18] !== last_sinx_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[18] = sinx_expected_prev[18];
	end
	if (
		( sinx_expected_prev[19] !== 1'bx ) && ( sinx_prev[19] !== sinx_expected_prev[19] )
		&& ((sinx_expected_prev[19] !== last_sinx_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[19] = sinx_expected_prev[19];
	end
	if (
		( sinx_expected_prev[20] !== 1'bx ) && ( sinx_prev[20] !== sinx_expected_prev[20] )
		&& ((sinx_expected_prev[20] !== last_sinx_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[20] = sinx_expected_prev[20];
	end
	if (
		( sinx_expected_prev[21] !== 1'bx ) && ( sinx_prev[21] !== sinx_expected_prev[21] )
		&& ((sinx_expected_prev[21] !== last_sinx_exp[21]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[21] = sinx_expected_prev[21];
	end
	if (
		( sinx_expected_prev[22] !== 1'bx ) && ( sinx_prev[22] !== sinx_expected_prev[22] )
		&& ((sinx_expected_prev[22] !== last_sinx_exp[22]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[22] = sinx_expected_prev[22];
	end
	if (
		( sinx_expected_prev[23] !== 1'bx ) && ( sinx_prev[23] !== sinx_expected_prev[23] )
		&& ((sinx_expected_prev[23] !== last_sinx_exp[23]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[23] = sinx_expected_prev[23];
	end
	if (
		( sinx_expected_prev[24] !== 1'bx ) && ( sinx_prev[24] !== sinx_expected_prev[24] )
		&& ((sinx_expected_prev[24] !== last_sinx_exp[24]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[24] = sinx_expected_prev[24];
	end
	if (
		( sinx_expected_prev[25] !== 1'bx ) && ( sinx_prev[25] !== sinx_expected_prev[25] )
		&& ((sinx_expected_prev[25] !== last_sinx_exp[25]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[25] = sinx_expected_prev[25];
	end
	if (
		( sinx_expected_prev[26] !== 1'bx ) && ( sinx_prev[26] !== sinx_expected_prev[26] )
		&& ((sinx_expected_prev[26] !== last_sinx_exp[26]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[26] = sinx_expected_prev[26];
	end
	if (
		( sinx_expected_prev[27] !== 1'bx ) && ( sinx_prev[27] !== sinx_expected_prev[27] )
		&& ((sinx_expected_prev[27] !== last_sinx_exp[27]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[27] = sinx_expected_prev[27];
	end
	if (
		( sinx_expected_prev[28] !== 1'bx ) && ( sinx_prev[28] !== sinx_expected_prev[28] )
		&& ((sinx_expected_prev[28] !== last_sinx_exp[28]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[28] = sinx_expected_prev[28];
	end
	if (
		( sinx_expected_prev[29] !== 1'bx ) && ( sinx_prev[29] !== sinx_expected_prev[29] )
		&& ((sinx_expected_prev[29] !== last_sinx_exp[29]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[29] = sinx_expected_prev[29];
	end
	if (
		( sinx_expected_prev[30] !== 1'bx ) && ( sinx_prev[30] !== sinx_expected_prev[30] )
		&& ((sinx_expected_prev[30] !== last_sinx_exp[30]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[30] = sinx_expected_prev[30];
	end
	if (
		( sinx_expected_prev[31] !== 1'bx ) && ( sinx_prev[31] !== sinx_expected_prev[31] )
		&& ((sinx_expected_prev[31] !== last_sinx_exp[31]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[31] = sinx_expected_prev[31];
	end
	if (
		( x_f_expected_prev[0] !== 1'bx ) && ( x_f_prev[0] !== x_f_expected_prev[0] )
		&& ((x_f_expected_prev[0] !== last_x_f_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x_f[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_f_expected_prev);
		$display ("     Real value = %b", x_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_x_f_exp[0] = x_f_expected_prev[0];
	end
	if (
		( x_f_expected_prev[1] !== 1'bx ) && ( x_f_prev[1] !== x_f_expected_prev[1] )
		&& ((x_f_expected_prev[1] !== last_x_f_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x_f[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_f_expected_prev);
		$display ("     Real value = %b", x_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_x_f_exp[1] = x_f_expected_prev[1];
	end
	if (
		( x_f_expected_prev[2] !== 1'bx ) && ( x_f_prev[2] !== x_f_expected_prev[2] )
		&& ((x_f_expected_prev[2] !== last_x_f_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x_f[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_f_expected_prev);
		$display ("     Real value = %b", x_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_x_f_exp[2] = x_f_expected_prev[2];
	end
	if (
		( x_f_expected_prev[3] !== 1'bx ) && ( x_f_prev[3] !== x_f_expected_prev[3] )
		&& ((x_f_expected_prev[3] !== last_x_f_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x_f[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_f_expected_prev);
		$display ("     Real value = %b", x_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_x_f_exp[3] = x_f_expected_prev[3];
	end
	if (
		( x_f_expected_prev[4] !== 1'bx ) && ( x_f_prev[4] !== x_f_expected_prev[4] )
		&& ((x_f_expected_prev[4] !== last_x_f_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x_f[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_f_expected_prev);
		$display ("     Real value = %b", x_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_x_f_exp[4] = x_f_expected_prev[4];
	end
	if (
		( x_f_expected_prev[5] !== 1'bx ) && ( x_f_prev[5] !== x_f_expected_prev[5] )
		&& ((x_f_expected_prev[5] !== last_x_f_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x_f[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_f_expected_prev);
		$display ("     Real value = %b", x_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_x_f_exp[5] = x_f_expected_prev[5];
	end
	if (
		( x_f_expected_prev[6] !== 1'bx ) && ( x_f_prev[6] !== x_f_expected_prev[6] )
		&& ((x_f_expected_prev[6] !== last_x_f_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x_f[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_f_expected_prev);
		$display ("     Real value = %b", x_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_x_f_exp[6] = x_f_expected_prev[6];
	end
	if (
		( x_f_expected_prev[7] !== 1'bx ) && ( x_f_prev[7] !== x_f_expected_prev[7] )
		&& ((x_f_expected_prev[7] !== last_x_f_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x_f[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_f_expected_prev);
		$display ("     Real value = %b", x_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_x_f_exp[7] = x_f_expected_prev[7];
	end
	if (
		( x_f_expected_prev[8] !== 1'bx ) && ( x_f_prev[8] !== x_f_expected_prev[8] )
		&& ((x_f_expected_prev[8] !== last_x_f_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x_f[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_f_expected_prev);
		$display ("     Real value = %b", x_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_x_f_exp[8] = x_f_expected_prev[8];
	end
	if (
		( x_f_expected_prev[9] !== 1'bx ) && ( x_f_prev[9] !== x_f_expected_prev[9] )
		&& ((x_f_expected_prev[9] !== last_x_f_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x_f[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_f_expected_prev);
		$display ("     Real value = %b", x_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_x_f_exp[9] = x_f_expected_prev[9];
	end
	if (
		( x_f_expected_prev[10] !== 1'bx ) && ( x_f_prev[10] !== x_f_expected_prev[10] )
		&& ((x_f_expected_prev[10] !== last_x_f_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x_f[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_f_expected_prev);
		$display ("     Real value = %b", x_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_x_f_exp[10] = x_f_expected_prev[10];
	end
	if (
		( x_f_expected_prev[11] !== 1'bx ) && ( x_f_prev[11] !== x_f_expected_prev[11] )
		&& ((x_f_expected_prev[11] !== last_x_f_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x_f[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_f_expected_prev);
		$display ("     Real value = %b", x_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_x_f_exp[11] = x_f_expected_prev[11];
	end
	if (
		( x_f_expected_prev[12] !== 1'bx ) && ( x_f_prev[12] !== x_f_expected_prev[12] )
		&& ((x_f_expected_prev[12] !== last_x_f_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x_f[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_f_expected_prev);
		$display ("     Real value = %b", x_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_x_f_exp[12] = x_f_expected_prev[12];
	end
	if (
		( x_f_expected_prev[13] !== 1'bx ) && ( x_f_prev[13] !== x_f_expected_prev[13] )
		&& ((x_f_expected_prev[13] !== last_x_f_exp[13]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x_f[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_f_expected_prev);
		$display ("     Real value = %b", x_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_x_f_exp[13] = x_f_expected_prev[13];
	end
	if (
		( x_f_expected_prev[14] !== 1'bx ) && ( x_f_prev[14] !== x_f_expected_prev[14] )
		&& ((x_f_expected_prev[14] !== last_x_f_exp[14]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x_f[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_f_expected_prev);
		$display ("     Real value = %b", x_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_x_f_exp[14] = x_f_expected_prev[14];
	end
	if (
		( x_f_expected_prev[15] !== 1'bx ) && ( x_f_prev[15] !== x_f_expected_prev[15] )
		&& ((x_f_expected_prev[15] !== last_x_f_exp[15]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x_f[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_f_expected_prev);
		$display ("     Real value = %b", x_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_x_f_exp[15] = x_f_expected_prev[15];
	end
	if (
		( x_f_expected_prev[16] !== 1'bx ) && ( x_f_prev[16] !== x_f_expected_prev[16] )
		&& ((x_f_expected_prev[16] !== last_x_f_exp[16]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x_f[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_f_expected_prev);
		$display ("     Real value = %b", x_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_x_f_exp[16] = x_f_expected_prev[16];
	end
	if (
		( x_f_expected_prev[17] !== 1'bx ) && ( x_f_prev[17] !== x_f_expected_prev[17] )
		&& ((x_f_expected_prev[17] !== last_x_f_exp[17]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x_f[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_f_expected_prev);
		$display ("     Real value = %b", x_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_x_f_exp[17] = x_f_expected_prev[17];
	end
	if (
		( x_f_expected_prev[18] !== 1'bx ) && ( x_f_prev[18] !== x_f_expected_prev[18] )
		&& ((x_f_expected_prev[18] !== last_x_f_exp[18]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x_f[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_f_expected_prev);
		$display ("     Real value = %b", x_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_x_f_exp[18] = x_f_expected_prev[18];
	end
	if (
		( x_f_expected_prev[19] !== 1'bx ) && ( x_f_prev[19] !== x_f_expected_prev[19] )
		&& ((x_f_expected_prev[19] !== last_x_f_exp[19]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x_f[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_f_expected_prev);
		$display ("     Real value = %b", x_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_x_f_exp[19] = x_f_expected_prev[19];
	end
	if (
		( x_f_expected_prev[20] !== 1'bx ) && ( x_f_prev[20] !== x_f_expected_prev[20] )
		&& ((x_f_expected_prev[20] !== last_x_f_exp[20]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x_f[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_f_expected_prev);
		$display ("     Real value = %b", x_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_x_f_exp[20] = x_f_expected_prev[20];
	end
	if (
		( x_f_expected_prev[21] !== 1'bx ) && ( x_f_prev[21] !== x_f_expected_prev[21] )
		&& ((x_f_expected_prev[21] !== last_x_f_exp[21]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x_f[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_f_expected_prev);
		$display ("     Real value = %b", x_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_x_f_exp[21] = x_f_expected_prev[21];
	end
	if (
		( x_f_expected_prev[22] !== 1'bx ) && ( x_f_prev[22] !== x_f_expected_prev[22] )
		&& ((x_f_expected_prev[22] !== last_x_f_exp[22]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x_f[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_f_expected_prev);
		$display ("     Real value = %b", x_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_x_f_exp[22] = x_f_expected_prev[22];
	end
	if (
		( x_f_expected_prev[23] !== 1'bx ) && ( x_f_prev[23] !== x_f_expected_prev[23] )
		&& ((x_f_expected_prev[23] !== last_x_f_exp[23]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x_f[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_f_expected_prev);
		$display ("     Real value = %b", x_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_x_f_exp[23] = x_f_expected_prev[23];
	end
	if (
		( x_f_expected_prev[24] !== 1'bx ) && ( x_f_prev[24] !== x_f_expected_prev[24] )
		&& ((x_f_expected_prev[24] !== last_x_f_exp[24]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x_f[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_f_expected_prev);
		$display ("     Real value = %b", x_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_x_f_exp[24] = x_f_expected_prev[24];
	end
	if (
		( x_f_expected_prev[25] !== 1'bx ) && ( x_f_prev[25] !== x_f_expected_prev[25] )
		&& ((x_f_expected_prev[25] !== last_x_f_exp[25]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x_f[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_f_expected_prev);
		$display ("     Real value = %b", x_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_x_f_exp[25] = x_f_expected_prev[25];
	end
	if (
		( x_f_expected_prev[26] !== 1'bx ) && ( x_f_prev[26] !== x_f_expected_prev[26] )
		&& ((x_f_expected_prev[26] !== last_x_f_exp[26]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x_f[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_f_expected_prev);
		$display ("     Real value = %b", x_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_x_f_exp[26] = x_f_expected_prev[26];
	end
	if (
		( x_f_expected_prev[27] !== 1'bx ) && ( x_f_prev[27] !== x_f_expected_prev[27] )
		&& ((x_f_expected_prev[27] !== last_x_f_exp[27]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x_f[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_f_expected_prev);
		$display ("     Real value = %b", x_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_x_f_exp[27] = x_f_expected_prev[27];
	end
	if (
		( x_f_expected_prev[28] !== 1'bx ) && ( x_f_prev[28] !== x_f_expected_prev[28] )
		&& ((x_f_expected_prev[28] !== last_x_f_exp[28]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x_f[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_f_expected_prev);
		$display ("     Real value = %b", x_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_x_f_exp[28] = x_f_expected_prev[28];
	end
	if (
		( x_f_expected_prev[29] !== 1'bx ) && ( x_f_prev[29] !== x_f_expected_prev[29] )
		&& ((x_f_expected_prev[29] !== last_x_f_exp[29]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x_f[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_f_expected_prev);
		$display ("     Real value = %b", x_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_x_f_exp[29] = x_f_expected_prev[29];
	end
	if (
		( x_f_expected_prev[30] !== 1'bx ) && ( x_f_prev[30] !== x_f_expected_prev[30] )
		&& ((x_f_expected_prev[30] !== last_x_f_exp[30]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x_f[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_f_expected_prev);
		$display ("     Real value = %b", x_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_x_f_exp[30] = x_f_expected_prev[30];
	end
	if (
		( x_f_expected_prev[31] !== 1'bx ) && ( x_f_prev[31] !== x_f_expected_prev[31] )
		&& ((x_f_expected_prev[31] !== last_x_f_exp[31]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x_f[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_f_expected_prev);
		$display ("     Real value = %b", x_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_x_f_exp[31] = x_f_expected_prev[31];
	end
	if (
		( xpow2_expected_prev[0] !== 1'bx ) && ( xpow2_prev[0] !== xpow2_expected_prev[0] )
		&& ((xpow2_expected_prev[0] !== last_xpow2_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow2_expected_prev);
		$display ("     Real value = %b", xpow2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_xpow2_exp[0] = xpow2_expected_prev[0];
	end
	if (
		( xpow2_expected_prev[1] !== 1'bx ) && ( xpow2_prev[1] !== xpow2_expected_prev[1] )
		&& ((xpow2_expected_prev[1] !== last_xpow2_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow2_expected_prev);
		$display ("     Real value = %b", xpow2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_xpow2_exp[1] = xpow2_expected_prev[1];
	end
	if (
		( xpow2_expected_prev[2] !== 1'bx ) && ( xpow2_prev[2] !== xpow2_expected_prev[2] )
		&& ((xpow2_expected_prev[2] !== last_xpow2_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow2_expected_prev);
		$display ("     Real value = %b", xpow2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_xpow2_exp[2] = xpow2_expected_prev[2];
	end
	if (
		( xpow2_expected_prev[3] !== 1'bx ) && ( xpow2_prev[3] !== xpow2_expected_prev[3] )
		&& ((xpow2_expected_prev[3] !== last_xpow2_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow2_expected_prev);
		$display ("     Real value = %b", xpow2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_xpow2_exp[3] = xpow2_expected_prev[3];
	end
	if (
		( xpow2_expected_prev[4] !== 1'bx ) && ( xpow2_prev[4] !== xpow2_expected_prev[4] )
		&& ((xpow2_expected_prev[4] !== last_xpow2_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow2_expected_prev);
		$display ("     Real value = %b", xpow2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_xpow2_exp[4] = xpow2_expected_prev[4];
	end
	if (
		( xpow2_expected_prev[5] !== 1'bx ) && ( xpow2_prev[5] !== xpow2_expected_prev[5] )
		&& ((xpow2_expected_prev[5] !== last_xpow2_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow2_expected_prev);
		$display ("     Real value = %b", xpow2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_xpow2_exp[5] = xpow2_expected_prev[5];
	end
	if (
		( xpow2_expected_prev[6] !== 1'bx ) && ( xpow2_prev[6] !== xpow2_expected_prev[6] )
		&& ((xpow2_expected_prev[6] !== last_xpow2_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow2_expected_prev);
		$display ("     Real value = %b", xpow2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_xpow2_exp[6] = xpow2_expected_prev[6];
	end
	if (
		( xpow2_expected_prev[7] !== 1'bx ) && ( xpow2_prev[7] !== xpow2_expected_prev[7] )
		&& ((xpow2_expected_prev[7] !== last_xpow2_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow2_expected_prev);
		$display ("     Real value = %b", xpow2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_xpow2_exp[7] = xpow2_expected_prev[7];
	end
	if (
		( xpow2_expected_prev[8] !== 1'bx ) && ( xpow2_prev[8] !== xpow2_expected_prev[8] )
		&& ((xpow2_expected_prev[8] !== last_xpow2_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow2_expected_prev);
		$display ("     Real value = %b", xpow2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_xpow2_exp[8] = xpow2_expected_prev[8];
	end
	if (
		( xpow2_expected_prev[9] !== 1'bx ) && ( xpow2_prev[9] !== xpow2_expected_prev[9] )
		&& ((xpow2_expected_prev[9] !== last_xpow2_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow2_expected_prev);
		$display ("     Real value = %b", xpow2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_xpow2_exp[9] = xpow2_expected_prev[9];
	end
	if (
		( xpow2_expected_prev[10] !== 1'bx ) && ( xpow2_prev[10] !== xpow2_expected_prev[10] )
		&& ((xpow2_expected_prev[10] !== last_xpow2_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow2_expected_prev);
		$display ("     Real value = %b", xpow2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_xpow2_exp[10] = xpow2_expected_prev[10];
	end
	if (
		( xpow2_expected_prev[11] !== 1'bx ) && ( xpow2_prev[11] !== xpow2_expected_prev[11] )
		&& ((xpow2_expected_prev[11] !== last_xpow2_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow2_expected_prev);
		$display ("     Real value = %b", xpow2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_xpow2_exp[11] = xpow2_expected_prev[11];
	end
	if (
		( xpow2_expected_prev[12] !== 1'bx ) && ( xpow2_prev[12] !== xpow2_expected_prev[12] )
		&& ((xpow2_expected_prev[12] !== last_xpow2_exp[12]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow2_expected_prev);
		$display ("     Real value = %b", xpow2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_xpow2_exp[12] = xpow2_expected_prev[12];
	end
	if (
		( xpow2_expected_prev[13] !== 1'bx ) && ( xpow2_prev[13] !== xpow2_expected_prev[13] )
		&& ((xpow2_expected_prev[13] !== last_xpow2_exp[13]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow2_expected_prev);
		$display ("     Real value = %b", xpow2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_xpow2_exp[13] = xpow2_expected_prev[13];
	end
	if (
		( xpow2_expected_prev[14] !== 1'bx ) && ( xpow2_prev[14] !== xpow2_expected_prev[14] )
		&& ((xpow2_expected_prev[14] !== last_xpow2_exp[14]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow2_expected_prev);
		$display ("     Real value = %b", xpow2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_xpow2_exp[14] = xpow2_expected_prev[14];
	end
	if (
		( xpow2_expected_prev[15] !== 1'bx ) && ( xpow2_prev[15] !== xpow2_expected_prev[15] )
		&& ((xpow2_expected_prev[15] !== last_xpow2_exp[15]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow2_expected_prev);
		$display ("     Real value = %b", xpow2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_xpow2_exp[15] = xpow2_expected_prev[15];
	end
	if (
		( xpow2_expected_prev[16] !== 1'bx ) && ( xpow2_prev[16] !== xpow2_expected_prev[16] )
		&& ((xpow2_expected_prev[16] !== last_xpow2_exp[16]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow2[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow2_expected_prev);
		$display ("     Real value = %b", xpow2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_xpow2_exp[16] = xpow2_expected_prev[16];
	end
	if (
		( xpow2_expected_prev[17] !== 1'bx ) && ( xpow2_prev[17] !== xpow2_expected_prev[17] )
		&& ((xpow2_expected_prev[17] !== last_xpow2_exp[17]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow2[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow2_expected_prev);
		$display ("     Real value = %b", xpow2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_xpow2_exp[17] = xpow2_expected_prev[17];
	end
	if (
		( xpow2_expected_prev[18] !== 1'bx ) && ( xpow2_prev[18] !== xpow2_expected_prev[18] )
		&& ((xpow2_expected_prev[18] !== last_xpow2_exp[18]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow2[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow2_expected_prev);
		$display ("     Real value = %b", xpow2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_xpow2_exp[18] = xpow2_expected_prev[18];
	end
	if (
		( xpow2_expected_prev[19] !== 1'bx ) && ( xpow2_prev[19] !== xpow2_expected_prev[19] )
		&& ((xpow2_expected_prev[19] !== last_xpow2_exp[19]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow2[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow2_expected_prev);
		$display ("     Real value = %b", xpow2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_xpow2_exp[19] = xpow2_expected_prev[19];
	end
	if (
		( xpow2_expected_prev[20] !== 1'bx ) && ( xpow2_prev[20] !== xpow2_expected_prev[20] )
		&& ((xpow2_expected_prev[20] !== last_xpow2_exp[20]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow2[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow2_expected_prev);
		$display ("     Real value = %b", xpow2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_xpow2_exp[20] = xpow2_expected_prev[20];
	end
	if (
		( xpow2_expected_prev[21] !== 1'bx ) && ( xpow2_prev[21] !== xpow2_expected_prev[21] )
		&& ((xpow2_expected_prev[21] !== last_xpow2_exp[21]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow2[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow2_expected_prev);
		$display ("     Real value = %b", xpow2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_xpow2_exp[21] = xpow2_expected_prev[21];
	end
	if (
		( xpow2_expected_prev[22] !== 1'bx ) && ( xpow2_prev[22] !== xpow2_expected_prev[22] )
		&& ((xpow2_expected_prev[22] !== last_xpow2_exp[22]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow2[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow2_expected_prev);
		$display ("     Real value = %b", xpow2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_xpow2_exp[22] = xpow2_expected_prev[22];
	end
	if (
		( xpow2_expected_prev[23] !== 1'bx ) && ( xpow2_prev[23] !== xpow2_expected_prev[23] )
		&& ((xpow2_expected_prev[23] !== last_xpow2_exp[23]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow2[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow2_expected_prev);
		$display ("     Real value = %b", xpow2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_xpow2_exp[23] = xpow2_expected_prev[23];
	end
	if (
		( xpow2_expected_prev[24] !== 1'bx ) && ( xpow2_prev[24] !== xpow2_expected_prev[24] )
		&& ((xpow2_expected_prev[24] !== last_xpow2_exp[24]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow2[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow2_expected_prev);
		$display ("     Real value = %b", xpow2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_xpow2_exp[24] = xpow2_expected_prev[24];
	end
	if (
		( xpow2_expected_prev[25] !== 1'bx ) && ( xpow2_prev[25] !== xpow2_expected_prev[25] )
		&& ((xpow2_expected_prev[25] !== last_xpow2_exp[25]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow2[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow2_expected_prev);
		$display ("     Real value = %b", xpow2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_xpow2_exp[25] = xpow2_expected_prev[25];
	end
	if (
		( xpow2_expected_prev[26] !== 1'bx ) && ( xpow2_prev[26] !== xpow2_expected_prev[26] )
		&& ((xpow2_expected_prev[26] !== last_xpow2_exp[26]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow2[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow2_expected_prev);
		$display ("     Real value = %b", xpow2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_xpow2_exp[26] = xpow2_expected_prev[26];
	end
	if (
		( xpow2_expected_prev[27] !== 1'bx ) && ( xpow2_prev[27] !== xpow2_expected_prev[27] )
		&& ((xpow2_expected_prev[27] !== last_xpow2_exp[27]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow2[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow2_expected_prev);
		$display ("     Real value = %b", xpow2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_xpow2_exp[27] = xpow2_expected_prev[27];
	end
	if (
		( xpow2_expected_prev[28] !== 1'bx ) && ( xpow2_prev[28] !== xpow2_expected_prev[28] )
		&& ((xpow2_expected_prev[28] !== last_xpow2_exp[28]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow2[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow2_expected_prev);
		$display ("     Real value = %b", xpow2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_xpow2_exp[28] = xpow2_expected_prev[28];
	end
	if (
		( xpow2_expected_prev[29] !== 1'bx ) && ( xpow2_prev[29] !== xpow2_expected_prev[29] )
		&& ((xpow2_expected_prev[29] !== last_xpow2_exp[29]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow2[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow2_expected_prev);
		$display ("     Real value = %b", xpow2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_xpow2_exp[29] = xpow2_expected_prev[29];
	end
	if (
		( xpow2_expected_prev[30] !== 1'bx ) && ( xpow2_prev[30] !== xpow2_expected_prev[30] )
		&& ((xpow2_expected_prev[30] !== last_xpow2_exp[30]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow2[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow2_expected_prev);
		$display ("     Real value = %b", xpow2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_xpow2_exp[30] = xpow2_expected_prev[30];
	end
	if (
		( xpow2_expected_prev[31] !== 1'bx ) && ( xpow2_prev[31] !== xpow2_expected_prev[31] )
		&& ((xpow2_expected_prev[31] !== last_xpow2_exp[31]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow2[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow2_expected_prev);
		$display ("     Real value = %b", xpow2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_xpow2_exp[31] = xpow2_expected_prev[31];
	end
	if (
		( xpow3_expected_prev[0] !== 1'bx ) && ( xpow3_prev[0] !== xpow3_expected_prev[0] )
		&& ((xpow3_expected_prev[0] !== last_xpow3_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow3_expected_prev);
		$display ("     Real value = %b", xpow3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_xpow3_exp[0] = xpow3_expected_prev[0];
	end
	if (
		( xpow3_expected_prev[1] !== 1'bx ) && ( xpow3_prev[1] !== xpow3_expected_prev[1] )
		&& ((xpow3_expected_prev[1] !== last_xpow3_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow3_expected_prev);
		$display ("     Real value = %b", xpow3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_xpow3_exp[1] = xpow3_expected_prev[1];
	end
	if (
		( xpow3_expected_prev[2] !== 1'bx ) && ( xpow3_prev[2] !== xpow3_expected_prev[2] )
		&& ((xpow3_expected_prev[2] !== last_xpow3_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow3_expected_prev);
		$display ("     Real value = %b", xpow3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_xpow3_exp[2] = xpow3_expected_prev[2];
	end
	if (
		( xpow3_expected_prev[3] !== 1'bx ) && ( xpow3_prev[3] !== xpow3_expected_prev[3] )
		&& ((xpow3_expected_prev[3] !== last_xpow3_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow3_expected_prev);
		$display ("     Real value = %b", xpow3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_xpow3_exp[3] = xpow3_expected_prev[3];
	end
	if (
		( xpow3_expected_prev[4] !== 1'bx ) && ( xpow3_prev[4] !== xpow3_expected_prev[4] )
		&& ((xpow3_expected_prev[4] !== last_xpow3_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow3_expected_prev);
		$display ("     Real value = %b", xpow3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_xpow3_exp[4] = xpow3_expected_prev[4];
	end
	if (
		( xpow3_expected_prev[5] !== 1'bx ) && ( xpow3_prev[5] !== xpow3_expected_prev[5] )
		&& ((xpow3_expected_prev[5] !== last_xpow3_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow3_expected_prev);
		$display ("     Real value = %b", xpow3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_xpow3_exp[5] = xpow3_expected_prev[5];
	end
	if (
		( xpow3_expected_prev[6] !== 1'bx ) && ( xpow3_prev[6] !== xpow3_expected_prev[6] )
		&& ((xpow3_expected_prev[6] !== last_xpow3_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow3_expected_prev);
		$display ("     Real value = %b", xpow3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_xpow3_exp[6] = xpow3_expected_prev[6];
	end
	if (
		( xpow3_expected_prev[7] !== 1'bx ) && ( xpow3_prev[7] !== xpow3_expected_prev[7] )
		&& ((xpow3_expected_prev[7] !== last_xpow3_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow3[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow3_expected_prev);
		$display ("     Real value = %b", xpow3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_xpow3_exp[7] = xpow3_expected_prev[7];
	end
	if (
		( xpow3_expected_prev[8] !== 1'bx ) && ( xpow3_prev[8] !== xpow3_expected_prev[8] )
		&& ((xpow3_expected_prev[8] !== last_xpow3_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow3[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow3_expected_prev);
		$display ("     Real value = %b", xpow3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_xpow3_exp[8] = xpow3_expected_prev[8];
	end
	if (
		( xpow3_expected_prev[9] !== 1'bx ) && ( xpow3_prev[9] !== xpow3_expected_prev[9] )
		&& ((xpow3_expected_prev[9] !== last_xpow3_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow3[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow3_expected_prev);
		$display ("     Real value = %b", xpow3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_xpow3_exp[9] = xpow3_expected_prev[9];
	end
	if (
		( xpow3_expected_prev[10] !== 1'bx ) && ( xpow3_prev[10] !== xpow3_expected_prev[10] )
		&& ((xpow3_expected_prev[10] !== last_xpow3_exp[10]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow3[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow3_expected_prev);
		$display ("     Real value = %b", xpow3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_xpow3_exp[10] = xpow3_expected_prev[10];
	end
	if (
		( xpow3_expected_prev[11] !== 1'bx ) && ( xpow3_prev[11] !== xpow3_expected_prev[11] )
		&& ((xpow3_expected_prev[11] !== last_xpow3_exp[11]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow3[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow3_expected_prev);
		$display ("     Real value = %b", xpow3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_xpow3_exp[11] = xpow3_expected_prev[11];
	end
	if (
		( xpow3_expected_prev[12] !== 1'bx ) && ( xpow3_prev[12] !== xpow3_expected_prev[12] )
		&& ((xpow3_expected_prev[12] !== last_xpow3_exp[12]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow3[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow3_expected_prev);
		$display ("     Real value = %b", xpow3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_xpow3_exp[12] = xpow3_expected_prev[12];
	end
	if (
		( xpow3_expected_prev[13] !== 1'bx ) && ( xpow3_prev[13] !== xpow3_expected_prev[13] )
		&& ((xpow3_expected_prev[13] !== last_xpow3_exp[13]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow3[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow3_expected_prev);
		$display ("     Real value = %b", xpow3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_xpow3_exp[13] = xpow3_expected_prev[13];
	end
	if (
		( xpow3_expected_prev[14] !== 1'bx ) && ( xpow3_prev[14] !== xpow3_expected_prev[14] )
		&& ((xpow3_expected_prev[14] !== last_xpow3_exp[14]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow3[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow3_expected_prev);
		$display ("     Real value = %b", xpow3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_xpow3_exp[14] = xpow3_expected_prev[14];
	end
	if (
		( xpow3_expected_prev[15] !== 1'bx ) && ( xpow3_prev[15] !== xpow3_expected_prev[15] )
		&& ((xpow3_expected_prev[15] !== last_xpow3_exp[15]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow3[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow3_expected_prev);
		$display ("     Real value = %b", xpow3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_xpow3_exp[15] = xpow3_expected_prev[15];
	end
	if (
		( xpow3_expected_prev[16] !== 1'bx ) && ( xpow3_prev[16] !== xpow3_expected_prev[16] )
		&& ((xpow3_expected_prev[16] !== last_xpow3_exp[16]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow3[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow3_expected_prev);
		$display ("     Real value = %b", xpow3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_xpow3_exp[16] = xpow3_expected_prev[16];
	end
	if (
		( xpow3_expected_prev[17] !== 1'bx ) && ( xpow3_prev[17] !== xpow3_expected_prev[17] )
		&& ((xpow3_expected_prev[17] !== last_xpow3_exp[17]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow3[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow3_expected_prev);
		$display ("     Real value = %b", xpow3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_xpow3_exp[17] = xpow3_expected_prev[17];
	end
	if (
		( xpow3_expected_prev[18] !== 1'bx ) && ( xpow3_prev[18] !== xpow3_expected_prev[18] )
		&& ((xpow3_expected_prev[18] !== last_xpow3_exp[18]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow3[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow3_expected_prev);
		$display ("     Real value = %b", xpow3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_xpow3_exp[18] = xpow3_expected_prev[18];
	end
	if (
		( xpow3_expected_prev[19] !== 1'bx ) && ( xpow3_prev[19] !== xpow3_expected_prev[19] )
		&& ((xpow3_expected_prev[19] !== last_xpow3_exp[19]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow3[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow3_expected_prev);
		$display ("     Real value = %b", xpow3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_xpow3_exp[19] = xpow3_expected_prev[19];
	end
	if (
		( xpow3_expected_prev[20] !== 1'bx ) && ( xpow3_prev[20] !== xpow3_expected_prev[20] )
		&& ((xpow3_expected_prev[20] !== last_xpow3_exp[20]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow3[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow3_expected_prev);
		$display ("     Real value = %b", xpow3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_xpow3_exp[20] = xpow3_expected_prev[20];
	end
	if (
		( xpow3_expected_prev[21] !== 1'bx ) && ( xpow3_prev[21] !== xpow3_expected_prev[21] )
		&& ((xpow3_expected_prev[21] !== last_xpow3_exp[21]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow3[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow3_expected_prev);
		$display ("     Real value = %b", xpow3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_xpow3_exp[21] = xpow3_expected_prev[21];
	end
	if (
		( xpow3_expected_prev[22] !== 1'bx ) && ( xpow3_prev[22] !== xpow3_expected_prev[22] )
		&& ((xpow3_expected_prev[22] !== last_xpow3_exp[22]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow3[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow3_expected_prev);
		$display ("     Real value = %b", xpow3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_xpow3_exp[22] = xpow3_expected_prev[22];
	end
	if (
		( xpow3_expected_prev[23] !== 1'bx ) && ( xpow3_prev[23] !== xpow3_expected_prev[23] )
		&& ((xpow3_expected_prev[23] !== last_xpow3_exp[23]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow3[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow3_expected_prev);
		$display ("     Real value = %b", xpow3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_xpow3_exp[23] = xpow3_expected_prev[23];
	end
	if (
		( xpow3_expected_prev[24] !== 1'bx ) && ( xpow3_prev[24] !== xpow3_expected_prev[24] )
		&& ((xpow3_expected_prev[24] !== last_xpow3_exp[24]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow3[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow3_expected_prev);
		$display ("     Real value = %b", xpow3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_xpow3_exp[24] = xpow3_expected_prev[24];
	end
	if (
		( xpow3_expected_prev[25] !== 1'bx ) && ( xpow3_prev[25] !== xpow3_expected_prev[25] )
		&& ((xpow3_expected_prev[25] !== last_xpow3_exp[25]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow3[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow3_expected_prev);
		$display ("     Real value = %b", xpow3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_xpow3_exp[25] = xpow3_expected_prev[25];
	end
	if (
		( xpow3_expected_prev[26] !== 1'bx ) && ( xpow3_prev[26] !== xpow3_expected_prev[26] )
		&& ((xpow3_expected_prev[26] !== last_xpow3_exp[26]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow3[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow3_expected_prev);
		$display ("     Real value = %b", xpow3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_xpow3_exp[26] = xpow3_expected_prev[26];
	end
	if (
		( xpow3_expected_prev[27] !== 1'bx ) && ( xpow3_prev[27] !== xpow3_expected_prev[27] )
		&& ((xpow3_expected_prev[27] !== last_xpow3_exp[27]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow3[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow3_expected_prev);
		$display ("     Real value = %b", xpow3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_xpow3_exp[27] = xpow3_expected_prev[27];
	end
	if (
		( xpow3_expected_prev[28] !== 1'bx ) && ( xpow3_prev[28] !== xpow3_expected_prev[28] )
		&& ((xpow3_expected_prev[28] !== last_xpow3_exp[28]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow3[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow3_expected_prev);
		$display ("     Real value = %b", xpow3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_xpow3_exp[28] = xpow3_expected_prev[28];
	end
	if (
		( xpow3_expected_prev[29] !== 1'bx ) && ( xpow3_prev[29] !== xpow3_expected_prev[29] )
		&& ((xpow3_expected_prev[29] !== last_xpow3_exp[29]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow3[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow3_expected_prev);
		$display ("     Real value = %b", xpow3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_xpow3_exp[29] = xpow3_expected_prev[29];
	end
	if (
		( xpow3_expected_prev[30] !== 1'bx ) && ( xpow3_prev[30] !== xpow3_expected_prev[30] )
		&& ((xpow3_expected_prev[30] !== last_xpow3_exp[30]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow3[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow3_expected_prev);
		$display ("     Real value = %b", xpow3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_xpow3_exp[30] = xpow3_expected_prev[30];
	end
	if (
		( xpow3_expected_prev[31] !== 1'bx ) && ( xpow3_prev[31] !== xpow3_expected_prev[31] )
		&& ((xpow3_expected_prev[31] !== last_xpow3_exp[31]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow3[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow3_expected_prev);
		$display ("     Real value = %b", xpow3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_xpow3_exp[31] = xpow3_expected_prev[31];
	end
	if (
		( xpow5_expected_prev[0] !== 1'bx ) && ( xpow5_prev[0] !== xpow5_expected_prev[0] )
		&& ((xpow5_expected_prev[0] !== last_xpow5_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow5[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow5_expected_prev);
		$display ("     Real value = %b", xpow5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_xpow5_exp[0] = xpow5_expected_prev[0];
	end
	if (
		( xpow5_expected_prev[1] !== 1'bx ) && ( xpow5_prev[1] !== xpow5_expected_prev[1] )
		&& ((xpow5_expected_prev[1] !== last_xpow5_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow5[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow5_expected_prev);
		$display ("     Real value = %b", xpow5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_xpow5_exp[1] = xpow5_expected_prev[1];
	end
	if (
		( xpow5_expected_prev[2] !== 1'bx ) && ( xpow5_prev[2] !== xpow5_expected_prev[2] )
		&& ((xpow5_expected_prev[2] !== last_xpow5_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow5[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow5_expected_prev);
		$display ("     Real value = %b", xpow5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_xpow5_exp[2] = xpow5_expected_prev[2];
	end
	if (
		( xpow5_expected_prev[3] !== 1'bx ) && ( xpow5_prev[3] !== xpow5_expected_prev[3] )
		&& ((xpow5_expected_prev[3] !== last_xpow5_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow5[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow5_expected_prev);
		$display ("     Real value = %b", xpow5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_xpow5_exp[3] = xpow5_expected_prev[3];
	end
	if (
		( xpow5_expected_prev[4] !== 1'bx ) && ( xpow5_prev[4] !== xpow5_expected_prev[4] )
		&& ((xpow5_expected_prev[4] !== last_xpow5_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow5[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow5_expected_prev);
		$display ("     Real value = %b", xpow5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_xpow5_exp[4] = xpow5_expected_prev[4];
	end
	if (
		( xpow5_expected_prev[5] !== 1'bx ) && ( xpow5_prev[5] !== xpow5_expected_prev[5] )
		&& ((xpow5_expected_prev[5] !== last_xpow5_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow5[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow5_expected_prev);
		$display ("     Real value = %b", xpow5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_xpow5_exp[5] = xpow5_expected_prev[5];
	end
	if (
		( xpow5_expected_prev[6] !== 1'bx ) && ( xpow5_prev[6] !== xpow5_expected_prev[6] )
		&& ((xpow5_expected_prev[6] !== last_xpow5_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow5[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow5_expected_prev);
		$display ("     Real value = %b", xpow5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_xpow5_exp[6] = xpow5_expected_prev[6];
	end
	if (
		( xpow5_expected_prev[7] !== 1'bx ) && ( xpow5_prev[7] !== xpow5_expected_prev[7] )
		&& ((xpow5_expected_prev[7] !== last_xpow5_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow5[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow5_expected_prev);
		$display ("     Real value = %b", xpow5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_xpow5_exp[7] = xpow5_expected_prev[7];
	end
	if (
		( xpow5_expected_prev[8] !== 1'bx ) && ( xpow5_prev[8] !== xpow5_expected_prev[8] )
		&& ((xpow5_expected_prev[8] !== last_xpow5_exp[8]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow5[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow5_expected_prev);
		$display ("     Real value = %b", xpow5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_xpow5_exp[8] = xpow5_expected_prev[8];
	end
	if (
		( xpow5_expected_prev[9] !== 1'bx ) && ( xpow5_prev[9] !== xpow5_expected_prev[9] )
		&& ((xpow5_expected_prev[9] !== last_xpow5_exp[9]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow5[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow5_expected_prev);
		$display ("     Real value = %b", xpow5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_xpow5_exp[9] = xpow5_expected_prev[9];
	end
	if (
		( xpow5_expected_prev[10] !== 1'bx ) && ( xpow5_prev[10] !== xpow5_expected_prev[10] )
		&& ((xpow5_expected_prev[10] !== last_xpow5_exp[10]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow5[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow5_expected_prev);
		$display ("     Real value = %b", xpow5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_xpow5_exp[10] = xpow5_expected_prev[10];
	end
	if (
		( xpow5_expected_prev[11] !== 1'bx ) && ( xpow5_prev[11] !== xpow5_expected_prev[11] )
		&& ((xpow5_expected_prev[11] !== last_xpow5_exp[11]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow5[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow5_expected_prev);
		$display ("     Real value = %b", xpow5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_xpow5_exp[11] = xpow5_expected_prev[11];
	end
	if (
		( xpow5_expected_prev[12] !== 1'bx ) && ( xpow5_prev[12] !== xpow5_expected_prev[12] )
		&& ((xpow5_expected_prev[12] !== last_xpow5_exp[12]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow5[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow5_expected_prev);
		$display ("     Real value = %b", xpow5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_xpow5_exp[12] = xpow5_expected_prev[12];
	end
	if (
		( xpow5_expected_prev[13] !== 1'bx ) && ( xpow5_prev[13] !== xpow5_expected_prev[13] )
		&& ((xpow5_expected_prev[13] !== last_xpow5_exp[13]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow5[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow5_expected_prev);
		$display ("     Real value = %b", xpow5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_xpow5_exp[13] = xpow5_expected_prev[13];
	end
	if (
		( xpow5_expected_prev[14] !== 1'bx ) && ( xpow5_prev[14] !== xpow5_expected_prev[14] )
		&& ((xpow5_expected_prev[14] !== last_xpow5_exp[14]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow5[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow5_expected_prev);
		$display ("     Real value = %b", xpow5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_xpow5_exp[14] = xpow5_expected_prev[14];
	end
	if (
		( xpow5_expected_prev[15] !== 1'bx ) && ( xpow5_prev[15] !== xpow5_expected_prev[15] )
		&& ((xpow5_expected_prev[15] !== last_xpow5_exp[15]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow5[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow5_expected_prev);
		$display ("     Real value = %b", xpow5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_xpow5_exp[15] = xpow5_expected_prev[15];
	end
	if (
		( xpow5_expected_prev[16] !== 1'bx ) && ( xpow5_prev[16] !== xpow5_expected_prev[16] )
		&& ((xpow5_expected_prev[16] !== last_xpow5_exp[16]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow5[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow5_expected_prev);
		$display ("     Real value = %b", xpow5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_xpow5_exp[16] = xpow5_expected_prev[16];
	end
	if (
		( xpow5_expected_prev[17] !== 1'bx ) && ( xpow5_prev[17] !== xpow5_expected_prev[17] )
		&& ((xpow5_expected_prev[17] !== last_xpow5_exp[17]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow5[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow5_expected_prev);
		$display ("     Real value = %b", xpow5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_xpow5_exp[17] = xpow5_expected_prev[17];
	end
	if (
		( xpow5_expected_prev[18] !== 1'bx ) && ( xpow5_prev[18] !== xpow5_expected_prev[18] )
		&& ((xpow5_expected_prev[18] !== last_xpow5_exp[18]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow5[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow5_expected_prev);
		$display ("     Real value = %b", xpow5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_xpow5_exp[18] = xpow5_expected_prev[18];
	end
	if (
		( xpow5_expected_prev[19] !== 1'bx ) && ( xpow5_prev[19] !== xpow5_expected_prev[19] )
		&& ((xpow5_expected_prev[19] !== last_xpow5_exp[19]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow5[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow5_expected_prev);
		$display ("     Real value = %b", xpow5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_xpow5_exp[19] = xpow5_expected_prev[19];
	end
	if (
		( xpow5_expected_prev[20] !== 1'bx ) && ( xpow5_prev[20] !== xpow5_expected_prev[20] )
		&& ((xpow5_expected_prev[20] !== last_xpow5_exp[20]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow5[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow5_expected_prev);
		$display ("     Real value = %b", xpow5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_xpow5_exp[20] = xpow5_expected_prev[20];
	end
	if (
		( xpow5_expected_prev[21] !== 1'bx ) && ( xpow5_prev[21] !== xpow5_expected_prev[21] )
		&& ((xpow5_expected_prev[21] !== last_xpow5_exp[21]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow5[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow5_expected_prev);
		$display ("     Real value = %b", xpow5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_xpow5_exp[21] = xpow5_expected_prev[21];
	end
	if (
		( xpow5_expected_prev[22] !== 1'bx ) && ( xpow5_prev[22] !== xpow5_expected_prev[22] )
		&& ((xpow5_expected_prev[22] !== last_xpow5_exp[22]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow5[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow5_expected_prev);
		$display ("     Real value = %b", xpow5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_xpow5_exp[22] = xpow5_expected_prev[22];
	end
	if (
		( xpow5_expected_prev[23] !== 1'bx ) && ( xpow5_prev[23] !== xpow5_expected_prev[23] )
		&& ((xpow5_expected_prev[23] !== last_xpow5_exp[23]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow5[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow5_expected_prev);
		$display ("     Real value = %b", xpow5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_xpow5_exp[23] = xpow5_expected_prev[23];
	end
	if (
		( xpow5_expected_prev[24] !== 1'bx ) && ( xpow5_prev[24] !== xpow5_expected_prev[24] )
		&& ((xpow5_expected_prev[24] !== last_xpow5_exp[24]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow5[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow5_expected_prev);
		$display ("     Real value = %b", xpow5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_xpow5_exp[24] = xpow5_expected_prev[24];
	end
	if (
		( xpow5_expected_prev[25] !== 1'bx ) && ( xpow5_prev[25] !== xpow5_expected_prev[25] )
		&& ((xpow5_expected_prev[25] !== last_xpow5_exp[25]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow5[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow5_expected_prev);
		$display ("     Real value = %b", xpow5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_xpow5_exp[25] = xpow5_expected_prev[25];
	end
	if (
		( xpow5_expected_prev[26] !== 1'bx ) && ( xpow5_prev[26] !== xpow5_expected_prev[26] )
		&& ((xpow5_expected_prev[26] !== last_xpow5_exp[26]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow5[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow5_expected_prev);
		$display ("     Real value = %b", xpow5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_xpow5_exp[26] = xpow5_expected_prev[26];
	end
	if (
		( xpow5_expected_prev[27] !== 1'bx ) && ( xpow5_prev[27] !== xpow5_expected_prev[27] )
		&& ((xpow5_expected_prev[27] !== last_xpow5_exp[27]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow5[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow5_expected_prev);
		$display ("     Real value = %b", xpow5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_xpow5_exp[27] = xpow5_expected_prev[27];
	end
	if (
		( xpow5_expected_prev[28] !== 1'bx ) && ( xpow5_prev[28] !== xpow5_expected_prev[28] )
		&& ((xpow5_expected_prev[28] !== last_xpow5_exp[28]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow5[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow5_expected_prev);
		$display ("     Real value = %b", xpow5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_xpow5_exp[28] = xpow5_expected_prev[28];
	end
	if (
		( xpow5_expected_prev[29] !== 1'bx ) && ( xpow5_prev[29] !== xpow5_expected_prev[29] )
		&& ((xpow5_expected_prev[29] !== last_xpow5_exp[29]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow5[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow5_expected_prev);
		$display ("     Real value = %b", xpow5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_xpow5_exp[29] = xpow5_expected_prev[29];
	end
	if (
		( xpow5_expected_prev[30] !== 1'bx ) && ( xpow5_prev[30] !== xpow5_expected_prev[30] )
		&& ((xpow5_expected_prev[30] !== last_xpow5_exp[30]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow5[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow5_expected_prev);
		$display ("     Real value = %b", xpow5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_xpow5_exp[30] = xpow5_expected_prev[30];
	end
	if (
		( xpow5_expected_prev[31] !== 1'bx ) && ( xpow5_prev[31] !== xpow5_expected_prev[31] )
		&& ((xpow5_expected_prev[31] !== last_xpow5_exp[31]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xpow5[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xpow5_expected_prev);
		$display ("     Real value = %b", xpow5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_xpow5_exp[31] = xpow5_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module calcula_seno_f_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg [31:0] x;
// wires                                               
wire [31:0] const6;
wire [31:0] const120;
wire [31:0] res_f;
wire [31:0] sinx;
wire [31:0] x_f;
wire [31:0] xpow2;
wire [31:0] xpow3;
wire [31:0] xpow5;

wire sampler;                             

// assign statements (if any)                          
calcula_seno_f i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.const6(const6),
	.const120(const120),
	.res_f(res_f),
	.sinx(sinx),
	.x(x),
	.x_f(x_f),
	.xpow2(xpow2),
	.xpow3(xpow3),
	.xpow5(xpow5)
);

// clock
always
begin
	clock = 1'b0;
	clock = #500000 1'b1;
	#500000;
end 
// x[ 31 ]
initial
begin
	x[31] = 1'b0;
end 
// x[ 30 ]
initial
begin
	x[30] = 1'b0;
end 
// x[ 29 ]
initial
begin
	x[29] = 1'b0;
end 
// x[ 28 ]
initial
begin
	x[28] = 1'b0;
end 
// x[ 27 ]
initial
begin
	x[27] = 1'b0;
end 
// x[ 26 ]
initial
begin
	x[26] = 1'b0;
end 
// x[ 25 ]
initial
begin
	x[25] = 1'b0;
end 
// x[ 24 ]
initial
begin
	x[24] = 1'b0;
end 
// x[ 23 ]
initial
begin
	x[23] = 1'b0;
end 
// x[ 22 ]
initial
begin
	x[22] = 1'b0;
end 
// x[ 21 ]
initial
begin
	x[21] = 1'b0;
end 
// x[ 20 ]
initial
begin
	x[20] = 1'b0;
end 
// x[ 19 ]
initial
begin
	x[19] = 1'b0;
end 
// x[ 18 ]
initial
begin
	x[18] = 1'b0;
end 
// x[ 17 ]
initial
begin
	x[17] = 1'b0;
end 
// x[ 16 ]
initial
begin
	x[16] = 1'b0;
end 
// x[ 15 ]
initial
begin
	x[15] = 1'b0;
end 
// x[ 14 ]
initial
begin
	x[14] = 1'b0;
end 
// x[ 13 ]
initial
begin
	x[13] = 1'b0;
end 
// x[ 12 ]
initial
begin
	x[12] = 1'b0;
end 
// x[ 11 ]
initial
begin
	x[11] = 1'b0;
end 
// x[ 10 ]
initial
begin
	x[10] = 1'b0;
end 
// x[ 9 ]
initial
begin
	x[9] = 1'b0;
end 
// x[ 8 ]
initial
begin
	x[8] = 1'b0;
end 
// x[ 7 ]
initial
begin
	x[7] = 1'b1;
end 
// x[ 6 ]
initial
begin
	x[6] = 1'b1;
end 
// x[ 5 ]
initial
begin
	x[5] = 1'b0;
end 
// x[ 4 ]
initial
begin
	x[4] = 1'b0;
end 
// x[ 3 ]
initial
begin
	x[3] = 1'b1;
end 
// x[ 2 ]
initial
begin
	x[2] = 1'b0;
end 
// x[ 1 ]
initial
begin
	x[1] = 1'b0;
end 
// x[ 0 ]
initial
begin
	x[0] = 1'b0;
end 

calcula_seno_f_vlg_sample_tst tb_sample (
	.clock(clock),
	.x(x),
	.sampler_tx(sampler)
);

calcula_seno_f_vlg_check_tst tb_out(
	.const6(const6),
	.const120(const120),
	.res_f(res_f),
	.sinx(sinx),
	.x_f(x_f),
	.xpow2(xpow2),
	.xpow3(xpow3),
	.xpow5(xpow5),
	.sampler_rx(sampler)
);
endmodule

