// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/05/2021 23:05:36"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    calcula_seno
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module calcula_seno_vlg_sample_tst(
	clock,
	x,
	sampler_tx
);
input  clock;
input [31:0] x;
output sampler_tx;

reg sample;
time current_time;
always @(clock or x)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module calcula_seno_vlg_check_tst (
	a,
	b,
	c,
	sinx,
	temp_counter,
	sampler_rx
);
input [31:0] a;
input [31:0] b;
input [31:0] c;
input [31:0] sinx;
input [7:0] temp_counter;
input sampler_rx;

reg [31:0] a_expected;
reg [31:0] b_expected;
reg [31:0] c_expected;
reg [31:0] sinx_expected;
reg [7:0] temp_counter_expected;

reg [31:0] a_prev;
reg [31:0] b_prev;
reg [31:0] c_prev;
reg [31:0] sinx_prev;
reg [7:0] temp_counter_prev;

reg [31:0] a_expected_prev;
reg [31:0] b_expected_prev;
reg [31:0] c_expected_prev;
reg [31:0] sinx_expected_prev;
reg [7:0] temp_counter_expected_prev;

reg [31:0] last_a_exp;
reg [31:0] last_b_exp;
reg [31:0] last_c_exp;
reg [31:0] last_sinx_exp;
reg [7:0] last_temp_counter_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	a_prev = a;
	b_prev = b;
	c_prev = c;
	sinx_prev = sinx;
	temp_counter_prev = temp_counter;
end

// update expected /o prevs

always @(trigger)
begin
	a_expected_prev = a_expected;
	b_expected_prev = b_expected;
	c_expected_prev = c_expected;
	sinx_expected_prev = sinx_expected;
	temp_counter_expected_prev = temp_counter_expected;
end


// expected temp_counter[ 7 ]
initial
begin
	temp_counter_expected[7] = 1'bX;
end 
// expected temp_counter[ 6 ]
initial
begin
	temp_counter_expected[6] = 1'bX;
end 
// expected temp_counter[ 5 ]
initial
begin
	temp_counter_expected[5] = 1'bX;
end 
// expected temp_counter[ 4 ]
initial
begin
	temp_counter_expected[4] = 1'bX;
end 
// expected temp_counter[ 3 ]
initial
begin
	temp_counter_expected[3] = 1'bX;
end 
// expected temp_counter[ 2 ]
initial
begin
	temp_counter_expected[2] = 1'bX;
end 
// expected temp_counter[ 1 ]
initial
begin
	temp_counter_expected[1] = 1'bX;
end 
// expected temp_counter[ 0 ]
initial
begin
	temp_counter_expected[0] = 1'bX;
end 
// expected a[ 31 ]
initial
begin
	a_expected[31] = 1'bX;
end 
// expected a[ 30 ]
initial
begin
	a_expected[30] = 1'bX;
end 
// expected a[ 29 ]
initial
begin
	a_expected[29] = 1'bX;
end 
// expected a[ 28 ]
initial
begin
	a_expected[28] = 1'bX;
end 
// expected a[ 27 ]
initial
begin
	a_expected[27] = 1'bX;
end 
// expected a[ 26 ]
initial
begin
	a_expected[26] = 1'bX;
end 
// expected a[ 25 ]
initial
begin
	a_expected[25] = 1'bX;
end 
// expected a[ 24 ]
initial
begin
	a_expected[24] = 1'bX;
end 
// expected a[ 23 ]
initial
begin
	a_expected[23] = 1'bX;
end 
// expected a[ 22 ]
initial
begin
	a_expected[22] = 1'bX;
end 
// expected a[ 21 ]
initial
begin
	a_expected[21] = 1'bX;
end 
// expected a[ 20 ]
initial
begin
	a_expected[20] = 1'bX;
end 
// expected a[ 19 ]
initial
begin
	a_expected[19] = 1'bX;
end 
// expected a[ 18 ]
initial
begin
	a_expected[18] = 1'bX;
end 
// expected a[ 17 ]
initial
begin
	a_expected[17] = 1'bX;
end 
// expected a[ 16 ]
initial
begin
	a_expected[16] = 1'bX;
end 
// expected a[ 15 ]
initial
begin
	a_expected[15] = 1'bX;
end 
// expected a[ 14 ]
initial
begin
	a_expected[14] = 1'bX;
end 
// expected a[ 13 ]
initial
begin
	a_expected[13] = 1'bX;
end 
// expected a[ 12 ]
initial
begin
	a_expected[12] = 1'bX;
end 
// expected a[ 11 ]
initial
begin
	a_expected[11] = 1'bX;
end 
// expected a[ 10 ]
initial
begin
	a_expected[10] = 1'bX;
end 
// expected a[ 9 ]
initial
begin
	a_expected[9] = 1'bX;
end 
// expected a[ 8 ]
initial
begin
	a_expected[8] = 1'bX;
end 
// expected a[ 7 ]
initial
begin
	a_expected[7] = 1'bX;
end 
// expected a[ 6 ]
initial
begin
	a_expected[6] = 1'bX;
end 
// expected a[ 5 ]
initial
begin
	a_expected[5] = 1'bX;
end 
// expected a[ 4 ]
initial
begin
	a_expected[4] = 1'bX;
end 
// expected a[ 3 ]
initial
begin
	a_expected[3] = 1'bX;
end 
// expected a[ 2 ]
initial
begin
	a_expected[2] = 1'bX;
end 
// expected a[ 1 ]
initial
begin
	a_expected[1] = 1'bX;
end 
// expected a[ 0 ]
initial
begin
	a_expected[0] = 1'bX;
end 
// expected b[ 31 ]
initial
begin
	b_expected[31] = 1'bX;
end 
// expected b[ 30 ]
initial
begin
	b_expected[30] = 1'bX;
end 
// expected b[ 29 ]
initial
begin
	b_expected[29] = 1'bX;
end 
// expected b[ 28 ]
initial
begin
	b_expected[28] = 1'bX;
end 
// expected b[ 27 ]
initial
begin
	b_expected[27] = 1'bX;
end 
// expected b[ 26 ]
initial
begin
	b_expected[26] = 1'bX;
end 
// expected b[ 25 ]
initial
begin
	b_expected[25] = 1'bX;
end 
// expected b[ 24 ]
initial
begin
	b_expected[24] = 1'bX;
end 
// expected b[ 23 ]
initial
begin
	b_expected[23] = 1'bX;
end 
// expected b[ 22 ]
initial
begin
	b_expected[22] = 1'bX;
end 
// expected b[ 21 ]
initial
begin
	b_expected[21] = 1'bX;
end 
// expected b[ 20 ]
initial
begin
	b_expected[20] = 1'bX;
end 
// expected b[ 19 ]
initial
begin
	b_expected[19] = 1'bX;
end 
// expected b[ 18 ]
initial
begin
	b_expected[18] = 1'bX;
end 
// expected b[ 17 ]
initial
begin
	b_expected[17] = 1'bX;
end 
// expected b[ 16 ]
initial
begin
	b_expected[16] = 1'bX;
end 
// expected b[ 15 ]
initial
begin
	b_expected[15] = 1'bX;
end 
// expected b[ 14 ]
initial
begin
	b_expected[14] = 1'bX;
end 
// expected b[ 13 ]
initial
begin
	b_expected[13] = 1'bX;
end 
// expected b[ 12 ]
initial
begin
	b_expected[12] = 1'bX;
end 
// expected b[ 11 ]
initial
begin
	b_expected[11] = 1'bX;
end 
// expected b[ 10 ]
initial
begin
	b_expected[10] = 1'bX;
end 
// expected b[ 9 ]
initial
begin
	b_expected[9] = 1'bX;
end 
// expected b[ 8 ]
initial
begin
	b_expected[8] = 1'bX;
end 
// expected b[ 7 ]
initial
begin
	b_expected[7] = 1'bX;
end 
// expected b[ 6 ]
initial
begin
	b_expected[6] = 1'bX;
end 
// expected b[ 5 ]
initial
begin
	b_expected[5] = 1'bX;
end 
// expected b[ 4 ]
initial
begin
	b_expected[4] = 1'bX;
end 
// expected b[ 3 ]
initial
begin
	b_expected[3] = 1'bX;
end 
// expected b[ 2 ]
initial
begin
	b_expected[2] = 1'bX;
end 
// expected b[ 1 ]
initial
begin
	b_expected[1] = 1'bX;
end 
// expected b[ 0 ]
initial
begin
	b_expected[0] = 1'bX;
end 
// expected c[ 31 ]
initial
begin
	c_expected[31] = 1'bX;
end 
// expected c[ 30 ]
initial
begin
	c_expected[30] = 1'bX;
end 
// expected c[ 29 ]
initial
begin
	c_expected[29] = 1'bX;
end 
// expected c[ 28 ]
initial
begin
	c_expected[28] = 1'bX;
end 
// expected c[ 27 ]
initial
begin
	c_expected[27] = 1'bX;
end 
// expected c[ 26 ]
initial
begin
	c_expected[26] = 1'bX;
end 
// expected c[ 25 ]
initial
begin
	c_expected[25] = 1'bX;
end 
// expected c[ 24 ]
initial
begin
	c_expected[24] = 1'bX;
end 
// expected c[ 23 ]
initial
begin
	c_expected[23] = 1'bX;
end 
// expected c[ 22 ]
initial
begin
	c_expected[22] = 1'bX;
end 
// expected c[ 21 ]
initial
begin
	c_expected[21] = 1'bX;
end 
// expected c[ 20 ]
initial
begin
	c_expected[20] = 1'bX;
end 
// expected c[ 19 ]
initial
begin
	c_expected[19] = 1'bX;
end 
// expected c[ 18 ]
initial
begin
	c_expected[18] = 1'bX;
end 
// expected c[ 17 ]
initial
begin
	c_expected[17] = 1'bX;
end 
// expected c[ 16 ]
initial
begin
	c_expected[16] = 1'bX;
end 
// expected c[ 15 ]
initial
begin
	c_expected[15] = 1'bX;
end 
// expected c[ 14 ]
initial
begin
	c_expected[14] = 1'bX;
end 
// expected c[ 13 ]
initial
begin
	c_expected[13] = 1'bX;
end 
// expected c[ 12 ]
initial
begin
	c_expected[12] = 1'bX;
end 
// expected c[ 11 ]
initial
begin
	c_expected[11] = 1'bX;
end 
// expected c[ 10 ]
initial
begin
	c_expected[10] = 1'bX;
end 
// expected c[ 9 ]
initial
begin
	c_expected[9] = 1'bX;
end 
// expected c[ 8 ]
initial
begin
	c_expected[8] = 1'bX;
end 
// expected c[ 7 ]
initial
begin
	c_expected[7] = 1'bX;
end 
// expected c[ 6 ]
initial
begin
	c_expected[6] = 1'bX;
end 
// expected c[ 5 ]
initial
begin
	c_expected[5] = 1'bX;
end 
// expected c[ 4 ]
initial
begin
	c_expected[4] = 1'bX;
end 
// expected c[ 3 ]
initial
begin
	c_expected[3] = 1'bX;
end 
// expected c[ 2 ]
initial
begin
	c_expected[2] = 1'bX;
end 
// expected c[ 1 ]
initial
begin
	c_expected[1] = 1'bX;
end 
// expected c[ 0 ]
initial
begin
	c_expected[0] = 1'bX;
end 
// expected sinx[ 31 ]
initial
begin
	sinx_expected[31] = 1'bX;
	sinx_expected[31] = #999000 1'b0;
end 
// expected sinx[ 30 ]
initial
begin
	sinx_expected[30] = 1'bX;
	sinx_expected[30] = #999000 1'b0;
end 
// expected sinx[ 29 ]
initial
begin
	sinx_expected[29] = 1'bX;
	sinx_expected[29] = #999000 1'b0;
end 
// expected sinx[ 28 ]
initial
begin
	sinx_expected[28] = 1'bX;
	sinx_expected[28] = #999000 1'b0;
end 
// expected sinx[ 27 ]
initial
begin
	sinx_expected[27] = 1'bX;
	sinx_expected[27] = #999000 1'b0;
end 
// expected sinx[ 26 ]
initial
begin
	sinx_expected[26] = 1'bX;
	sinx_expected[26] = #999000 1'b0;
end 
// expected sinx[ 25 ]
initial
begin
	sinx_expected[25] = 1'bX;
	sinx_expected[25] = #999000 1'b0;
end 
// expected sinx[ 24 ]
initial
begin
	sinx_expected[24] = 1'bX;
	sinx_expected[24] = #999000 1'b0;
end 
// expected sinx[ 23 ]
initial
begin
	sinx_expected[23] = 1'bX;
	sinx_expected[23] = #999000 1'b0;
end 
// expected sinx[ 22 ]
initial
begin
	sinx_expected[22] = 1'bX;
	sinx_expected[22] = #999000 1'b0;
end 
// expected sinx[ 21 ]
initial
begin
	sinx_expected[21] = 1'bX;
	sinx_expected[21] = #999000 1'b0;
end 
// expected sinx[ 20 ]
initial
begin
	sinx_expected[20] = 1'bX;
	sinx_expected[20] = #999000 1'b0;
end 
// expected sinx[ 19 ]
initial
begin
	sinx_expected[19] = 1'bX;
	sinx_expected[19] = #999000 1'b0;
end 
// expected sinx[ 18 ]
initial
begin
	sinx_expected[18] = 1'bX;
	sinx_expected[18] = #999000 1'b0;
end 
// expected sinx[ 17 ]
initial
begin
	sinx_expected[17] = 1'bX;
	sinx_expected[17] = #999000 1'b0;
end 
// expected sinx[ 16 ]
initial
begin
	sinx_expected[16] = 1'bX;
	sinx_expected[16] = #999000 1'b0;
end 
// expected sinx[ 15 ]
initial
begin
	sinx_expected[15] = 1'bX;
	sinx_expected[15] = #999000 1'b0;
end 
// expected sinx[ 14 ]
initial
begin
	sinx_expected[14] = 1'bX;
	sinx_expected[14] = #999000 1'b0;
end 
// expected sinx[ 13 ]
initial
begin
	sinx_expected[13] = 1'bX;
	sinx_expected[13] = #999000 1'b0;
end 
// expected sinx[ 12 ]
initial
begin
	sinx_expected[12] = 1'bX;
	sinx_expected[12] = #999000 1'b0;
end 
// expected sinx[ 11 ]
initial
begin
	sinx_expected[11] = 1'bX;
	sinx_expected[11] = #999000 1'b0;
end 
// expected sinx[ 10 ]
initial
begin
	sinx_expected[10] = 1'bX;
	sinx_expected[10] = #999000 1'b0;
end 
// expected sinx[ 9 ]
initial
begin
	sinx_expected[9] = 1'bX;
	sinx_expected[9] = #999000 1'b0;
end 
// expected sinx[ 8 ]
initial
begin
	sinx_expected[8] = 1'bX;
	sinx_expected[8] = #999000 1'b0;
end 
// expected sinx[ 7 ]
initial
begin
	sinx_expected[7] = 1'bX;
	sinx_expected[7] = #999000 1'b0;
end 
// expected sinx[ 6 ]
initial
begin
	sinx_expected[6] = 1'bX;
	sinx_expected[6] = #999000 1'b0;
end 
// expected sinx[ 5 ]
initial
begin
	sinx_expected[5] = 1'bX;
	sinx_expected[5] = #999000 1'b0;
end 
// expected sinx[ 4 ]
initial
begin
	sinx_expected[4] = 1'bX;
	sinx_expected[4] = #999000 1'b0;
end 
// expected sinx[ 3 ]
initial
begin
	sinx_expected[3] = 1'bX;
	sinx_expected[3] = #999000 1'b0;
end 
// expected sinx[ 2 ]
initial
begin
	sinx_expected[2] = 1'bX;
	sinx_expected[2] = #999000 1'b0;
end 
// expected sinx[ 1 ]
initial
begin
	sinx_expected[1] = 1'bX;
	sinx_expected[1] = #999000 1'b0;
end 
// expected sinx[ 0 ]
initial
begin
	sinx_expected[0] = 1'bX;
	sinx_expected[0] = #999000 1'b0;
end 
// generate trigger
always @(a_expected or a or b_expected or b or c_expected or c or sinx_expected or sinx or temp_counter_expected or temp_counter)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected a = %b | expected b = %b | expected c = %b | expected sinx = %b | expected temp_counter = %b | ",a_expected_prev,b_expected_prev,c_expected_prev,sinx_expected_prev,temp_counter_expected_prev);
	$display("| real a = %b | real b = %b | real c = %b | real sinx = %b | real temp_counter = %b | ",a_prev,b_prev,c_prev,sinx_prev,temp_counter_prev);
`endif
	if (
		( a_expected_prev[0] !== 1'bx ) && ( a_prev[0] !== a_expected_prev[0] )
		&& ((a_expected_prev[0] !== last_a_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[0] = a_expected_prev[0];
	end
	if (
		( a_expected_prev[1] !== 1'bx ) && ( a_prev[1] !== a_expected_prev[1] )
		&& ((a_expected_prev[1] !== last_a_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[1] = a_expected_prev[1];
	end
	if (
		( a_expected_prev[2] !== 1'bx ) && ( a_prev[2] !== a_expected_prev[2] )
		&& ((a_expected_prev[2] !== last_a_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[2] = a_expected_prev[2];
	end
	if (
		( a_expected_prev[3] !== 1'bx ) && ( a_prev[3] !== a_expected_prev[3] )
		&& ((a_expected_prev[3] !== last_a_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[3] = a_expected_prev[3];
	end
	if (
		( a_expected_prev[4] !== 1'bx ) && ( a_prev[4] !== a_expected_prev[4] )
		&& ((a_expected_prev[4] !== last_a_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[4] = a_expected_prev[4];
	end
	if (
		( a_expected_prev[5] !== 1'bx ) && ( a_prev[5] !== a_expected_prev[5] )
		&& ((a_expected_prev[5] !== last_a_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[5] = a_expected_prev[5];
	end
	if (
		( a_expected_prev[6] !== 1'bx ) && ( a_prev[6] !== a_expected_prev[6] )
		&& ((a_expected_prev[6] !== last_a_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[6] = a_expected_prev[6];
	end
	if (
		( a_expected_prev[7] !== 1'bx ) && ( a_prev[7] !== a_expected_prev[7] )
		&& ((a_expected_prev[7] !== last_a_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[7] = a_expected_prev[7];
	end
	if (
		( a_expected_prev[8] !== 1'bx ) && ( a_prev[8] !== a_expected_prev[8] )
		&& ((a_expected_prev[8] !== last_a_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[8] = a_expected_prev[8];
	end
	if (
		( a_expected_prev[9] !== 1'bx ) && ( a_prev[9] !== a_expected_prev[9] )
		&& ((a_expected_prev[9] !== last_a_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[9] = a_expected_prev[9];
	end
	if (
		( a_expected_prev[10] !== 1'bx ) && ( a_prev[10] !== a_expected_prev[10] )
		&& ((a_expected_prev[10] !== last_a_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[10] = a_expected_prev[10];
	end
	if (
		( a_expected_prev[11] !== 1'bx ) && ( a_prev[11] !== a_expected_prev[11] )
		&& ((a_expected_prev[11] !== last_a_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[11] = a_expected_prev[11];
	end
	if (
		( a_expected_prev[12] !== 1'bx ) && ( a_prev[12] !== a_expected_prev[12] )
		&& ((a_expected_prev[12] !== last_a_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[12] = a_expected_prev[12];
	end
	if (
		( a_expected_prev[13] !== 1'bx ) && ( a_prev[13] !== a_expected_prev[13] )
		&& ((a_expected_prev[13] !== last_a_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[13] = a_expected_prev[13];
	end
	if (
		( a_expected_prev[14] !== 1'bx ) && ( a_prev[14] !== a_expected_prev[14] )
		&& ((a_expected_prev[14] !== last_a_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[14] = a_expected_prev[14];
	end
	if (
		( a_expected_prev[15] !== 1'bx ) && ( a_prev[15] !== a_expected_prev[15] )
		&& ((a_expected_prev[15] !== last_a_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[15] = a_expected_prev[15];
	end
	if (
		( a_expected_prev[16] !== 1'bx ) && ( a_prev[16] !== a_expected_prev[16] )
		&& ((a_expected_prev[16] !== last_a_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[16] = a_expected_prev[16];
	end
	if (
		( a_expected_prev[17] !== 1'bx ) && ( a_prev[17] !== a_expected_prev[17] )
		&& ((a_expected_prev[17] !== last_a_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[17] = a_expected_prev[17];
	end
	if (
		( a_expected_prev[18] !== 1'bx ) && ( a_prev[18] !== a_expected_prev[18] )
		&& ((a_expected_prev[18] !== last_a_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[18] = a_expected_prev[18];
	end
	if (
		( a_expected_prev[19] !== 1'bx ) && ( a_prev[19] !== a_expected_prev[19] )
		&& ((a_expected_prev[19] !== last_a_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[19] = a_expected_prev[19];
	end
	if (
		( a_expected_prev[20] !== 1'bx ) && ( a_prev[20] !== a_expected_prev[20] )
		&& ((a_expected_prev[20] !== last_a_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[20] = a_expected_prev[20];
	end
	if (
		( a_expected_prev[21] !== 1'bx ) && ( a_prev[21] !== a_expected_prev[21] )
		&& ((a_expected_prev[21] !== last_a_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[21] = a_expected_prev[21];
	end
	if (
		( a_expected_prev[22] !== 1'bx ) && ( a_prev[22] !== a_expected_prev[22] )
		&& ((a_expected_prev[22] !== last_a_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[22] = a_expected_prev[22];
	end
	if (
		( a_expected_prev[23] !== 1'bx ) && ( a_prev[23] !== a_expected_prev[23] )
		&& ((a_expected_prev[23] !== last_a_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[23] = a_expected_prev[23];
	end
	if (
		( a_expected_prev[24] !== 1'bx ) && ( a_prev[24] !== a_expected_prev[24] )
		&& ((a_expected_prev[24] !== last_a_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[24] = a_expected_prev[24];
	end
	if (
		( a_expected_prev[25] !== 1'bx ) && ( a_prev[25] !== a_expected_prev[25] )
		&& ((a_expected_prev[25] !== last_a_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[25] = a_expected_prev[25];
	end
	if (
		( a_expected_prev[26] !== 1'bx ) && ( a_prev[26] !== a_expected_prev[26] )
		&& ((a_expected_prev[26] !== last_a_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[26] = a_expected_prev[26];
	end
	if (
		( a_expected_prev[27] !== 1'bx ) && ( a_prev[27] !== a_expected_prev[27] )
		&& ((a_expected_prev[27] !== last_a_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[27] = a_expected_prev[27];
	end
	if (
		( a_expected_prev[28] !== 1'bx ) && ( a_prev[28] !== a_expected_prev[28] )
		&& ((a_expected_prev[28] !== last_a_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[28] = a_expected_prev[28];
	end
	if (
		( a_expected_prev[29] !== 1'bx ) && ( a_prev[29] !== a_expected_prev[29] )
		&& ((a_expected_prev[29] !== last_a_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[29] = a_expected_prev[29];
	end
	if (
		( a_expected_prev[30] !== 1'bx ) && ( a_prev[30] !== a_expected_prev[30] )
		&& ((a_expected_prev[30] !== last_a_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[30] = a_expected_prev[30];
	end
	if (
		( a_expected_prev[31] !== 1'bx ) && ( a_prev[31] !== a_expected_prev[31] )
		&& ((a_expected_prev[31] !== last_a_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp[31] = a_expected_prev[31];
	end
	if (
		( b_expected_prev[0] !== 1'bx ) && ( b_prev[0] !== b_expected_prev[0] )
		&& ((b_expected_prev[0] !== last_b_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[0] = b_expected_prev[0];
	end
	if (
		( b_expected_prev[1] !== 1'bx ) && ( b_prev[1] !== b_expected_prev[1] )
		&& ((b_expected_prev[1] !== last_b_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[1] = b_expected_prev[1];
	end
	if (
		( b_expected_prev[2] !== 1'bx ) && ( b_prev[2] !== b_expected_prev[2] )
		&& ((b_expected_prev[2] !== last_b_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[2] = b_expected_prev[2];
	end
	if (
		( b_expected_prev[3] !== 1'bx ) && ( b_prev[3] !== b_expected_prev[3] )
		&& ((b_expected_prev[3] !== last_b_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[3] = b_expected_prev[3];
	end
	if (
		( b_expected_prev[4] !== 1'bx ) && ( b_prev[4] !== b_expected_prev[4] )
		&& ((b_expected_prev[4] !== last_b_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[4] = b_expected_prev[4];
	end
	if (
		( b_expected_prev[5] !== 1'bx ) && ( b_prev[5] !== b_expected_prev[5] )
		&& ((b_expected_prev[5] !== last_b_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[5] = b_expected_prev[5];
	end
	if (
		( b_expected_prev[6] !== 1'bx ) && ( b_prev[6] !== b_expected_prev[6] )
		&& ((b_expected_prev[6] !== last_b_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[6] = b_expected_prev[6];
	end
	if (
		( b_expected_prev[7] !== 1'bx ) && ( b_prev[7] !== b_expected_prev[7] )
		&& ((b_expected_prev[7] !== last_b_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[7] = b_expected_prev[7];
	end
	if (
		( b_expected_prev[8] !== 1'bx ) && ( b_prev[8] !== b_expected_prev[8] )
		&& ((b_expected_prev[8] !== last_b_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[8] = b_expected_prev[8];
	end
	if (
		( b_expected_prev[9] !== 1'bx ) && ( b_prev[9] !== b_expected_prev[9] )
		&& ((b_expected_prev[9] !== last_b_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[9] = b_expected_prev[9];
	end
	if (
		( b_expected_prev[10] !== 1'bx ) && ( b_prev[10] !== b_expected_prev[10] )
		&& ((b_expected_prev[10] !== last_b_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[10] = b_expected_prev[10];
	end
	if (
		( b_expected_prev[11] !== 1'bx ) && ( b_prev[11] !== b_expected_prev[11] )
		&& ((b_expected_prev[11] !== last_b_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[11] = b_expected_prev[11];
	end
	if (
		( b_expected_prev[12] !== 1'bx ) && ( b_prev[12] !== b_expected_prev[12] )
		&& ((b_expected_prev[12] !== last_b_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[12] = b_expected_prev[12];
	end
	if (
		( b_expected_prev[13] !== 1'bx ) && ( b_prev[13] !== b_expected_prev[13] )
		&& ((b_expected_prev[13] !== last_b_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[13] = b_expected_prev[13];
	end
	if (
		( b_expected_prev[14] !== 1'bx ) && ( b_prev[14] !== b_expected_prev[14] )
		&& ((b_expected_prev[14] !== last_b_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[14] = b_expected_prev[14];
	end
	if (
		( b_expected_prev[15] !== 1'bx ) && ( b_prev[15] !== b_expected_prev[15] )
		&& ((b_expected_prev[15] !== last_b_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[15] = b_expected_prev[15];
	end
	if (
		( b_expected_prev[16] !== 1'bx ) && ( b_prev[16] !== b_expected_prev[16] )
		&& ((b_expected_prev[16] !== last_b_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[16] = b_expected_prev[16];
	end
	if (
		( b_expected_prev[17] !== 1'bx ) && ( b_prev[17] !== b_expected_prev[17] )
		&& ((b_expected_prev[17] !== last_b_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[17] = b_expected_prev[17];
	end
	if (
		( b_expected_prev[18] !== 1'bx ) && ( b_prev[18] !== b_expected_prev[18] )
		&& ((b_expected_prev[18] !== last_b_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[18] = b_expected_prev[18];
	end
	if (
		( b_expected_prev[19] !== 1'bx ) && ( b_prev[19] !== b_expected_prev[19] )
		&& ((b_expected_prev[19] !== last_b_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[19] = b_expected_prev[19];
	end
	if (
		( b_expected_prev[20] !== 1'bx ) && ( b_prev[20] !== b_expected_prev[20] )
		&& ((b_expected_prev[20] !== last_b_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[20] = b_expected_prev[20];
	end
	if (
		( b_expected_prev[21] !== 1'bx ) && ( b_prev[21] !== b_expected_prev[21] )
		&& ((b_expected_prev[21] !== last_b_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[21] = b_expected_prev[21];
	end
	if (
		( b_expected_prev[22] !== 1'bx ) && ( b_prev[22] !== b_expected_prev[22] )
		&& ((b_expected_prev[22] !== last_b_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[22] = b_expected_prev[22];
	end
	if (
		( b_expected_prev[23] !== 1'bx ) && ( b_prev[23] !== b_expected_prev[23] )
		&& ((b_expected_prev[23] !== last_b_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[23] = b_expected_prev[23];
	end
	if (
		( b_expected_prev[24] !== 1'bx ) && ( b_prev[24] !== b_expected_prev[24] )
		&& ((b_expected_prev[24] !== last_b_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[24] = b_expected_prev[24];
	end
	if (
		( b_expected_prev[25] !== 1'bx ) && ( b_prev[25] !== b_expected_prev[25] )
		&& ((b_expected_prev[25] !== last_b_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[25] = b_expected_prev[25];
	end
	if (
		( b_expected_prev[26] !== 1'bx ) && ( b_prev[26] !== b_expected_prev[26] )
		&& ((b_expected_prev[26] !== last_b_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[26] = b_expected_prev[26];
	end
	if (
		( b_expected_prev[27] !== 1'bx ) && ( b_prev[27] !== b_expected_prev[27] )
		&& ((b_expected_prev[27] !== last_b_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[27] = b_expected_prev[27];
	end
	if (
		( b_expected_prev[28] !== 1'bx ) && ( b_prev[28] !== b_expected_prev[28] )
		&& ((b_expected_prev[28] !== last_b_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[28] = b_expected_prev[28];
	end
	if (
		( b_expected_prev[29] !== 1'bx ) && ( b_prev[29] !== b_expected_prev[29] )
		&& ((b_expected_prev[29] !== last_b_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[29] = b_expected_prev[29];
	end
	if (
		( b_expected_prev[30] !== 1'bx ) && ( b_prev[30] !== b_expected_prev[30] )
		&& ((b_expected_prev[30] !== last_b_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[30] = b_expected_prev[30];
	end
	if (
		( b_expected_prev[31] !== 1'bx ) && ( b_prev[31] !== b_expected_prev[31] )
		&& ((b_expected_prev[31] !== last_b_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp[31] = b_expected_prev[31];
	end
	if (
		( c_expected_prev[0] !== 1'bx ) && ( c_prev[0] !== c_expected_prev[0] )
		&& ((c_expected_prev[0] !== last_c_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_c_exp[0] = c_expected_prev[0];
	end
	if (
		( c_expected_prev[1] !== 1'bx ) && ( c_prev[1] !== c_expected_prev[1] )
		&& ((c_expected_prev[1] !== last_c_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_c_exp[1] = c_expected_prev[1];
	end
	if (
		( c_expected_prev[2] !== 1'bx ) && ( c_prev[2] !== c_expected_prev[2] )
		&& ((c_expected_prev[2] !== last_c_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_c_exp[2] = c_expected_prev[2];
	end
	if (
		( c_expected_prev[3] !== 1'bx ) && ( c_prev[3] !== c_expected_prev[3] )
		&& ((c_expected_prev[3] !== last_c_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_c_exp[3] = c_expected_prev[3];
	end
	if (
		( c_expected_prev[4] !== 1'bx ) && ( c_prev[4] !== c_expected_prev[4] )
		&& ((c_expected_prev[4] !== last_c_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_c_exp[4] = c_expected_prev[4];
	end
	if (
		( c_expected_prev[5] !== 1'bx ) && ( c_prev[5] !== c_expected_prev[5] )
		&& ((c_expected_prev[5] !== last_c_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_c_exp[5] = c_expected_prev[5];
	end
	if (
		( c_expected_prev[6] !== 1'bx ) && ( c_prev[6] !== c_expected_prev[6] )
		&& ((c_expected_prev[6] !== last_c_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_c_exp[6] = c_expected_prev[6];
	end
	if (
		( c_expected_prev[7] !== 1'bx ) && ( c_prev[7] !== c_expected_prev[7] )
		&& ((c_expected_prev[7] !== last_c_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_c_exp[7] = c_expected_prev[7];
	end
	if (
		( c_expected_prev[8] !== 1'bx ) && ( c_prev[8] !== c_expected_prev[8] )
		&& ((c_expected_prev[8] !== last_c_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_c_exp[8] = c_expected_prev[8];
	end
	if (
		( c_expected_prev[9] !== 1'bx ) && ( c_prev[9] !== c_expected_prev[9] )
		&& ((c_expected_prev[9] !== last_c_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_c_exp[9] = c_expected_prev[9];
	end
	if (
		( c_expected_prev[10] !== 1'bx ) && ( c_prev[10] !== c_expected_prev[10] )
		&& ((c_expected_prev[10] !== last_c_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_c_exp[10] = c_expected_prev[10];
	end
	if (
		( c_expected_prev[11] !== 1'bx ) && ( c_prev[11] !== c_expected_prev[11] )
		&& ((c_expected_prev[11] !== last_c_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_c_exp[11] = c_expected_prev[11];
	end
	if (
		( c_expected_prev[12] !== 1'bx ) && ( c_prev[12] !== c_expected_prev[12] )
		&& ((c_expected_prev[12] !== last_c_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_c_exp[12] = c_expected_prev[12];
	end
	if (
		( c_expected_prev[13] !== 1'bx ) && ( c_prev[13] !== c_expected_prev[13] )
		&& ((c_expected_prev[13] !== last_c_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_c_exp[13] = c_expected_prev[13];
	end
	if (
		( c_expected_prev[14] !== 1'bx ) && ( c_prev[14] !== c_expected_prev[14] )
		&& ((c_expected_prev[14] !== last_c_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_c_exp[14] = c_expected_prev[14];
	end
	if (
		( c_expected_prev[15] !== 1'bx ) && ( c_prev[15] !== c_expected_prev[15] )
		&& ((c_expected_prev[15] !== last_c_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_c_exp[15] = c_expected_prev[15];
	end
	if (
		( c_expected_prev[16] !== 1'bx ) && ( c_prev[16] !== c_expected_prev[16] )
		&& ((c_expected_prev[16] !== last_c_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_c_exp[16] = c_expected_prev[16];
	end
	if (
		( c_expected_prev[17] !== 1'bx ) && ( c_prev[17] !== c_expected_prev[17] )
		&& ((c_expected_prev[17] !== last_c_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_c_exp[17] = c_expected_prev[17];
	end
	if (
		( c_expected_prev[18] !== 1'bx ) && ( c_prev[18] !== c_expected_prev[18] )
		&& ((c_expected_prev[18] !== last_c_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_c_exp[18] = c_expected_prev[18];
	end
	if (
		( c_expected_prev[19] !== 1'bx ) && ( c_prev[19] !== c_expected_prev[19] )
		&& ((c_expected_prev[19] !== last_c_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_c_exp[19] = c_expected_prev[19];
	end
	if (
		( c_expected_prev[20] !== 1'bx ) && ( c_prev[20] !== c_expected_prev[20] )
		&& ((c_expected_prev[20] !== last_c_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_c_exp[20] = c_expected_prev[20];
	end
	if (
		( c_expected_prev[21] !== 1'bx ) && ( c_prev[21] !== c_expected_prev[21] )
		&& ((c_expected_prev[21] !== last_c_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_c_exp[21] = c_expected_prev[21];
	end
	if (
		( c_expected_prev[22] !== 1'bx ) && ( c_prev[22] !== c_expected_prev[22] )
		&& ((c_expected_prev[22] !== last_c_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_c_exp[22] = c_expected_prev[22];
	end
	if (
		( c_expected_prev[23] !== 1'bx ) && ( c_prev[23] !== c_expected_prev[23] )
		&& ((c_expected_prev[23] !== last_c_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_c_exp[23] = c_expected_prev[23];
	end
	if (
		( c_expected_prev[24] !== 1'bx ) && ( c_prev[24] !== c_expected_prev[24] )
		&& ((c_expected_prev[24] !== last_c_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_c_exp[24] = c_expected_prev[24];
	end
	if (
		( c_expected_prev[25] !== 1'bx ) && ( c_prev[25] !== c_expected_prev[25] )
		&& ((c_expected_prev[25] !== last_c_exp[25]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_c_exp[25] = c_expected_prev[25];
	end
	if (
		( c_expected_prev[26] !== 1'bx ) && ( c_prev[26] !== c_expected_prev[26] )
		&& ((c_expected_prev[26] !== last_c_exp[26]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_c_exp[26] = c_expected_prev[26];
	end
	if (
		( c_expected_prev[27] !== 1'bx ) && ( c_prev[27] !== c_expected_prev[27] )
		&& ((c_expected_prev[27] !== last_c_exp[27]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_c_exp[27] = c_expected_prev[27];
	end
	if (
		( c_expected_prev[28] !== 1'bx ) && ( c_prev[28] !== c_expected_prev[28] )
		&& ((c_expected_prev[28] !== last_c_exp[28]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_c_exp[28] = c_expected_prev[28];
	end
	if (
		( c_expected_prev[29] !== 1'bx ) && ( c_prev[29] !== c_expected_prev[29] )
		&& ((c_expected_prev[29] !== last_c_exp[29]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_c_exp[29] = c_expected_prev[29];
	end
	if (
		( c_expected_prev[30] !== 1'bx ) && ( c_prev[30] !== c_expected_prev[30] )
		&& ((c_expected_prev[30] !== last_c_exp[30]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_c_exp[30] = c_expected_prev[30];
	end
	if (
		( c_expected_prev[31] !== 1'bx ) && ( c_prev[31] !== c_expected_prev[31] )
		&& ((c_expected_prev[31] !== last_c_exp[31]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_c_exp[31] = c_expected_prev[31];
	end
	if (
		( sinx_expected_prev[0] !== 1'bx ) && ( sinx_prev[0] !== sinx_expected_prev[0] )
		&& ((sinx_expected_prev[0] !== last_sinx_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[0] = sinx_expected_prev[0];
	end
	if (
		( sinx_expected_prev[1] !== 1'bx ) && ( sinx_prev[1] !== sinx_expected_prev[1] )
		&& ((sinx_expected_prev[1] !== last_sinx_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[1] = sinx_expected_prev[1];
	end
	if (
		( sinx_expected_prev[2] !== 1'bx ) && ( sinx_prev[2] !== sinx_expected_prev[2] )
		&& ((sinx_expected_prev[2] !== last_sinx_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[2] = sinx_expected_prev[2];
	end
	if (
		( sinx_expected_prev[3] !== 1'bx ) && ( sinx_prev[3] !== sinx_expected_prev[3] )
		&& ((sinx_expected_prev[3] !== last_sinx_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[3] = sinx_expected_prev[3];
	end
	if (
		( sinx_expected_prev[4] !== 1'bx ) && ( sinx_prev[4] !== sinx_expected_prev[4] )
		&& ((sinx_expected_prev[4] !== last_sinx_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[4] = sinx_expected_prev[4];
	end
	if (
		( sinx_expected_prev[5] !== 1'bx ) && ( sinx_prev[5] !== sinx_expected_prev[5] )
		&& ((sinx_expected_prev[5] !== last_sinx_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[5] = sinx_expected_prev[5];
	end
	if (
		( sinx_expected_prev[6] !== 1'bx ) && ( sinx_prev[6] !== sinx_expected_prev[6] )
		&& ((sinx_expected_prev[6] !== last_sinx_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[6] = sinx_expected_prev[6];
	end
	if (
		( sinx_expected_prev[7] !== 1'bx ) && ( sinx_prev[7] !== sinx_expected_prev[7] )
		&& ((sinx_expected_prev[7] !== last_sinx_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[7] = sinx_expected_prev[7];
	end
	if (
		( sinx_expected_prev[8] !== 1'bx ) && ( sinx_prev[8] !== sinx_expected_prev[8] )
		&& ((sinx_expected_prev[8] !== last_sinx_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[8] = sinx_expected_prev[8];
	end
	if (
		( sinx_expected_prev[9] !== 1'bx ) && ( sinx_prev[9] !== sinx_expected_prev[9] )
		&& ((sinx_expected_prev[9] !== last_sinx_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[9] = sinx_expected_prev[9];
	end
	if (
		( sinx_expected_prev[10] !== 1'bx ) && ( sinx_prev[10] !== sinx_expected_prev[10] )
		&& ((sinx_expected_prev[10] !== last_sinx_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[10] = sinx_expected_prev[10];
	end
	if (
		( sinx_expected_prev[11] !== 1'bx ) && ( sinx_prev[11] !== sinx_expected_prev[11] )
		&& ((sinx_expected_prev[11] !== last_sinx_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[11] = sinx_expected_prev[11];
	end
	if (
		( sinx_expected_prev[12] !== 1'bx ) && ( sinx_prev[12] !== sinx_expected_prev[12] )
		&& ((sinx_expected_prev[12] !== last_sinx_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[12] = sinx_expected_prev[12];
	end
	if (
		( sinx_expected_prev[13] !== 1'bx ) && ( sinx_prev[13] !== sinx_expected_prev[13] )
		&& ((sinx_expected_prev[13] !== last_sinx_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[13] = sinx_expected_prev[13];
	end
	if (
		( sinx_expected_prev[14] !== 1'bx ) && ( sinx_prev[14] !== sinx_expected_prev[14] )
		&& ((sinx_expected_prev[14] !== last_sinx_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[14] = sinx_expected_prev[14];
	end
	if (
		( sinx_expected_prev[15] !== 1'bx ) && ( sinx_prev[15] !== sinx_expected_prev[15] )
		&& ((sinx_expected_prev[15] !== last_sinx_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[15] = sinx_expected_prev[15];
	end
	if (
		( sinx_expected_prev[16] !== 1'bx ) && ( sinx_prev[16] !== sinx_expected_prev[16] )
		&& ((sinx_expected_prev[16] !== last_sinx_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[16] = sinx_expected_prev[16];
	end
	if (
		( sinx_expected_prev[17] !== 1'bx ) && ( sinx_prev[17] !== sinx_expected_prev[17] )
		&& ((sinx_expected_prev[17] !== last_sinx_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[17] = sinx_expected_prev[17];
	end
	if (
		( sinx_expected_prev[18] !== 1'bx ) && ( sinx_prev[18] !== sinx_expected_prev[18] )
		&& ((sinx_expected_prev[18] !== last_sinx_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[18] = sinx_expected_prev[18];
	end
	if (
		( sinx_expected_prev[19] !== 1'bx ) && ( sinx_prev[19] !== sinx_expected_prev[19] )
		&& ((sinx_expected_prev[19] !== last_sinx_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[19] = sinx_expected_prev[19];
	end
	if (
		( sinx_expected_prev[20] !== 1'bx ) && ( sinx_prev[20] !== sinx_expected_prev[20] )
		&& ((sinx_expected_prev[20] !== last_sinx_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[20] = sinx_expected_prev[20];
	end
	if (
		( sinx_expected_prev[21] !== 1'bx ) && ( sinx_prev[21] !== sinx_expected_prev[21] )
		&& ((sinx_expected_prev[21] !== last_sinx_exp[21]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[21] = sinx_expected_prev[21];
	end
	if (
		( sinx_expected_prev[22] !== 1'bx ) && ( sinx_prev[22] !== sinx_expected_prev[22] )
		&& ((sinx_expected_prev[22] !== last_sinx_exp[22]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[22] = sinx_expected_prev[22];
	end
	if (
		( sinx_expected_prev[23] !== 1'bx ) && ( sinx_prev[23] !== sinx_expected_prev[23] )
		&& ((sinx_expected_prev[23] !== last_sinx_exp[23]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[23] = sinx_expected_prev[23];
	end
	if (
		( sinx_expected_prev[24] !== 1'bx ) && ( sinx_prev[24] !== sinx_expected_prev[24] )
		&& ((sinx_expected_prev[24] !== last_sinx_exp[24]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[24] = sinx_expected_prev[24];
	end
	if (
		( sinx_expected_prev[25] !== 1'bx ) && ( sinx_prev[25] !== sinx_expected_prev[25] )
		&& ((sinx_expected_prev[25] !== last_sinx_exp[25]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[25] = sinx_expected_prev[25];
	end
	if (
		( sinx_expected_prev[26] !== 1'bx ) && ( sinx_prev[26] !== sinx_expected_prev[26] )
		&& ((sinx_expected_prev[26] !== last_sinx_exp[26]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[26] = sinx_expected_prev[26];
	end
	if (
		( sinx_expected_prev[27] !== 1'bx ) && ( sinx_prev[27] !== sinx_expected_prev[27] )
		&& ((sinx_expected_prev[27] !== last_sinx_exp[27]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[27] = sinx_expected_prev[27];
	end
	if (
		( sinx_expected_prev[28] !== 1'bx ) && ( sinx_prev[28] !== sinx_expected_prev[28] )
		&& ((sinx_expected_prev[28] !== last_sinx_exp[28]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[28] = sinx_expected_prev[28];
	end
	if (
		( sinx_expected_prev[29] !== 1'bx ) && ( sinx_prev[29] !== sinx_expected_prev[29] )
		&& ((sinx_expected_prev[29] !== last_sinx_exp[29]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[29] = sinx_expected_prev[29];
	end
	if (
		( sinx_expected_prev[30] !== 1'bx ) && ( sinx_prev[30] !== sinx_expected_prev[30] )
		&& ((sinx_expected_prev[30] !== last_sinx_exp[30]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[30] = sinx_expected_prev[30];
	end
	if (
		( sinx_expected_prev[31] !== 1'bx ) && ( sinx_prev[31] !== sinx_expected_prev[31] )
		&& ((sinx_expected_prev[31] !== last_sinx_exp[31]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinx[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinx_expected_prev);
		$display ("     Real value = %b", sinx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sinx_exp[31] = sinx_expected_prev[31];
	end
	if (
		( temp_counter_expected_prev[0] !== 1'bx ) && ( temp_counter_prev[0] !== temp_counter_expected_prev[0] )
		&& ((temp_counter_expected_prev[0] !== last_temp_counter_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp_counter[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_counter_expected_prev);
		$display ("     Real value = %b", temp_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_temp_counter_exp[0] = temp_counter_expected_prev[0];
	end
	if (
		( temp_counter_expected_prev[1] !== 1'bx ) && ( temp_counter_prev[1] !== temp_counter_expected_prev[1] )
		&& ((temp_counter_expected_prev[1] !== last_temp_counter_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp_counter[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_counter_expected_prev);
		$display ("     Real value = %b", temp_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_temp_counter_exp[1] = temp_counter_expected_prev[1];
	end
	if (
		( temp_counter_expected_prev[2] !== 1'bx ) && ( temp_counter_prev[2] !== temp_counter_expected_prev[2] )
		&& ((temp_counter_expected_prev[2] !== last_temp_counter_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp_counter[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_counter_expected_prev);
		$display ("     Real value = %b", temp_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_temp_counter_exp[2] = temp_counter_expected_prev[2];
	end
	if (
		( temp_counter_expected_prev[3] !== 1'bx ) && ( temp_counter_prev[3] !== temp_counter_expected_prev[3] )
		&& ((temp_counter_expected_prev[3] !== last_temp_counter_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp_counter[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_counter_expected_prev);
		$display ("     Real value = %b", temp_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_temp_counter_exp[3] = temp_counter_expected_prev[3];
	end
	if (
		( temp_counter_expected_prev[4] !== 1'bx ) && ( temp_counter_prev[4] !== temp_counter_expected_prev[4] )
		&& ((temp_counter_expected_prev[4] !== last_temp_counter_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp_counter[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_counter_expected_prev);
		$display ("     Real value = %b", temp_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_temp_counter_exp[4] = temp_counter_expected_prev[4];
	end
	if (
		( temp_counter_expected_prev[5] !== 1'bx ) && ( temp_counter_prev[5] !== temp_counter_expected_prev[5] )
		&& ((temp_counter_expected_prev[5] !== last_temp_counter_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp_counter[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_counter_expected_prev);
		$display ("     Real value = %b", temp_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_temp_counter_exp[5] = temp_counter_expected_prev[5];
	end
	if (
		( temp_counter_expected_prev[6] !== 1'bx ) && ( temp_counter_prev[6] !== temp_counter_expected_prev[6] )
		&& ((temp_counter_expected_prev[6] !== last_temp_counter_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp_counter[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_counter_expected_prev);
		$display ("     Real value = %b", temp_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_temp_counter_exp[6] = temp_counter_expected_prev[6];
	end
	if (
		( temp_counter_expected_prev[7] !== 1'bx ) && ( temp_counter_prev[7] !== temp_counter_expected_prev[7] )
		&& ((temp_counter_expected_prev[7] !== last_temp_counter_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp_counter[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_counter_expected_prev);
		$display ("     Real value = %b", temp_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_temp_counter_exp[7] = temp_counter_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module calcula_seno_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg [31:0] x;
// wires                                               
wire [31:0] a;
wire [31:0] b;
wire [31:0] c;
wire [31:0] sinx;
wire [7:0] temp_counter;

wire sampler;                             

// assign statements (if any)                          
calcula_seno i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.c(c),
	.clock(clock),
	.sinx(sinx),
	.temp_counter(temp_counter),
	.x(x)
);

// clock
always
begin
	clock = 1'b0;
	clock = #500000 1'b1;
	#500000;
end 
// x[ 31 ]
initial
begin
	x[31] = 1'b0;
end 
// x[ 30 ]
initial
begin
	x[30] = 1'b0;
end 
// x[ 29 ]
initial
begin
	x[29] = 1'b0;
end 
// x[ 28 ]
initial
begin
	x[28] = 1'b0;
end 
// x[ 27 ]
initial
begin
	x[27] = 1'b0;
end 
// x[ 26 ]
initial
begin
	x[26] = 1'b0;
end 
// x[ 25 ]
initial
begin
	x[25] = 1'b0;
end 
// x[ 24 ]
initial
begin
	x[24] = 1'b0;
end 
// x[ 23 ]
initial
begin
	x[23] = 1'b0;
end 
// x[ 22 ]
initial
begin
	x[22] = 1'b0;
end 
// x[ 21 ]
initial
begin
	x[21] = 1'b0;
end 
// x[ 20 ]
initial
begin
	x[20] = 1'b0;
end 
// x[ 19 ]
initial
begin
	x[19] = 1'b0;
end 
// x[ 18 ]
initial
begin
	x[18] = 1'b0;
end 
// x[ 17 ]
initial
begin
	x[17] = 1'b0;
end 
// x[ 16 ]
initial
begin
	x[16] = 1'b0;
end 
// x[ 15 ]
initial
begin
	x[15] = 1'b0;
end 
// x[ 14 ]
initial
begin
	x[14] = 1'b0;
end 
// x[ 13 ]
initial
begin
	x[13] = 1'b0;
end 
// x[ 12 ]
initial
begin
	x[12] = 1'b0;
end 
// x[ 11 ]
initial
begin
	x[11] = 1'b0;
end 
// x[ 10 ]
initial
begin
	x[10] = 1'b0;
end 
// x[ 9 ]
initial
begin
	x[9] = 1'b0;
end 
// x[ 8 ]
initial
begin
	x[8] = 1'b0;
end 
// x[ 7 ]
initial
begin
	x[7] = 1'b0;
end 
// x[ 6 ]
initial
begin
	x[6] = 1'b0;
end 
// x[ 5 ]
initial
begin
	x[5] = 1'b0;
end 
// x[ 4 ]
initial
begin
	x[4] = 1'b0;
end 
// x[ 3 ]
initial
begin
	x[3] = 1'b1;
end 
// x[ 2 ]
initial
begin
	x[2] = 1'b1;
end 
// x[ 1 ]
initial
begin
	x[1] = 1'b1;
end 
// x[ 0 ]
initial
begin
	x[0] = 1'b1;
end 

calcula_seno_vlg_sample_tst tb_sample (
	.clock(clock),
	.x(x),
	.sampler_tx(sampler)
);

calcula_seno_vlg_check_tst tb_out(
	.a(a),
	.b(b),
	.c(c),
	.sinx(sinx),
	.temp_counter(temp_counter),
	.sampler_rx(sampler)
);
endmodule

